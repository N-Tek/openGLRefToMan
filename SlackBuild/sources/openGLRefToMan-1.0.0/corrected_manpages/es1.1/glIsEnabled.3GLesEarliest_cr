'\" t
.\"     Title: glIsEnabled
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 12/21/2021
.\"    Manual: { OpenGL ES 1.1 }
.\"    Source: pkged by Necib CAPAR(PhD.)
\"  Language: English
.\"
.TH "GLISENABLED" "3GLesEarliest" "12/21/2021" "pkged by Necib CAPAR(PhD\&.)" "{ OpenGL ES 1\&.1 }"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glIsEnabled \- test whether a capability is enabled
.SH "C SPECIFICATION"
.HP \w'GLboolean\ glIsEnabled('u
.BI "GLboolean glIsEnabled(GLenum\ " "cap" ");"
.SH "PARAMETERS"
.PP
\fIcap\fR
.RS 4
Specifies a symbolic constant indicating a GL capability\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglIsEnabled\fR
returns
\fBGL_TRUE\fR
if cap is an enabled capability and returns
\fBGL_FALSE\fR
otherwise\&.
.PP
The following capabilities are accepted for
\fIcap\fR:
.TS
tab(:);
lB lB lB
lB lB lB.
T{
\fBConstant\fR
T}:T{
\ \&
T}:T{
\fBSee function:\fR
T}
T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}
.T&
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l.
T{
\fBGL_ALPHA_TEST\fR
T}:T{
\ \&
T}:T{
\fBglAlphaFunc\fR()
T}
T{
\fBGL_BLEND\fR
T}:T{
\ \&
T}:T{
\fBglBlendFunc\fR(), \fBglLogicOp\fR()
T}
T{
\fBGL_CLIP_PLANE\fR\fBi\fR\fB\fR
T}:T{
\ \&
T}:T{
\fBglClipPlane\fR()
T}
T{
\fBGL_COLOR_ARRAY\fR
T}:T{
\ \&
T}:T{
\fBglColorPointer\fR()
T}
T{
\fBGL_COLOR_LOGIC_OP\fR
T}:T{
\ \&
T}:T{
\fBglLogicOp\fR()
T}
T{
\fBGL_COLOR_MATERIAL\fR
T}:T{
\ \&
T}:T{
\fBglMaterial\fR()
T}
T{
\fBGL_CULL_FACE\fR
T}:T{
\ \&
T}:T{
\fBglCullFace\fR()
T}
T{
\fBGL_DEPTH_TEST\fR
T}:T{
\ \&
T}:T{
\fBglDepthFunc\fR(), \fBglDepthRange\fR()
T}
T{
\fBGL_DITHER\fR
T}:T{
\ \&
T}:T{
\fBglEnable\fR()
T}
T{
\fBGL_FOG\fR
T}:T{
\ \&
T}:T{
\fBglFog\fR()
T}
T{
\fBGL_LIGHT\fR\fBi\fR\fB\fR
T}:T{
\ \&
T}:T{
\fBglLight\fR(), \fBglLightModel\fR()
T}
T{
\fBGL_LIGHTING\fR
T}:T{
\ \&
T}:T{
\fBglLight\fR(), \fBglLightModel\fR(), \fBglMaterial\fR()
T}
T{
\fBGL_LINE_SMOOTH\fR
T}:T{
\ \&
T}:T{
\fBglLineWidth\fR()
T}
T{
\fBGL_MATRIX_INDEX_ARRAY_OES\fR
T}:T{
\ \&
T}:T{
\fBglEnableClientState\fR()
T}
T{
\fBGL_MATRIX_PALETTE_OES\fR
T}:T{
\ \&
T}:T{
\fBglMatrixMode\fR()
T}
T{
\fBGL_MULTISAMPLE\fR
T}:T{
\ \&
T}:T{
\fBglEnable\fR()
T}
T{
\fBGL_NORMAL_ARRAY\fR
T}:T{
\ \&
T}:T{
\fBglNormalPointer\fR()
T}
T{
\fBGL_NORMALIZE\fR
T}:T{
\ \&
T}:T{
\fBglNormal\fR()
T}
T{
\fBGL_POINT_SIZE_ARRAY_OES\fR
T}:T{
\ \&
T}:T{
\fBglEnableClientState\fR()
T}
T{
\fBGL_POINT_SMOOTH\fR
T}:T{
\ \&
T}:T{
\fBglPointSize\fR()
T}
T{
\fBGL_POINT_SPRITE_OES\fR
T}:T{
\ \&
T}:T{
\fBglTexEnv\fR()
T}
T{
\fBGL_POLYGON_OFFSET_FILL\fR
T}:T{
\ \&
T}:T{
\fBglPolygonOffset\fR()
T}
T{
\fBGL_RESCALE_NORMAL\fR
T}:T{
\ \&
T}:T{
\fBglNormal\fR()
T}
T{
\fBGL_SAMPLE_ALPHA_TO_COVERAGE\fR
T}:T{
\ \&
T}:T{
\fBglSampleCoverage\fR()
T}
T{
\fBGL_SAMPLE_ALPHA_TO_ONE\fR
T}:T{
\ \&
T}:T{
\fBglSampleCoverage\fR()
T}
T{
\fBGL_SAMPLE_COVERAGE\fR
T}:T{
\ \&
T}:T{
\fBglSampleCoverage\fR()
T}
T{
\fBGL_SCISSOR_TEST\fR
T}:T{
\ \&
T}:T{
\fBglScissor\fR()
T}
T{
\fBGL_STENCIL_TEST\fR
T}:T{
\ \&
T}:T{
\fBglStencilFunc\fR(), \fBglStencilOp\fR()
T}
T{
\fBGL_TEXTURE_2D\fR
T}:T{
\ \&
T}:T{
\fBglTexImage2D\fR()
T}
T{
\fBGL_TEXTURE_COORD_ARRAY\fR
T}:T{
\ \&
T}:T{
\fBglTexCoordPointer\fR()
T}
T{
\fBGL_VERTEX_ARRAY\fR
T}:T{
\ \&
T}:T{
\fBglVertexPointer\fR()
T}
T{
\fBGL_WEIGHT_ARRAY_OES\fR
T}:T{
\ \&
T}:T{
\fBglEnableClientState\fR()
T}
.TE
.sp 1
.SH "NOTES"
.PP
If an error is generated,
\fBglIsEnabled\fR
returns 0\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fIcap\fR
is not an accepted value\&.
.SH "SEE ALSO"
.PP
\fBglEnable\fR(),
\fBglEnableClientState\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
2003\-2004 Silicon Graphics, Inc\&. This document is licensed under the SGI Free Software B License\&. For details, see
\m[blue]\fBhttps://khronos\&.org/registry/OpenGL\-Refpages/LICENSES/LicenseRef\-FreeB\&.txt\fR\m[]\&.
