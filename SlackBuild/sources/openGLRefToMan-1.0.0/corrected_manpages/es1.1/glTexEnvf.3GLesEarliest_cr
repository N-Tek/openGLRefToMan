'\" t
.\"     Title: glTexEnv
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 12/22/2021
.\"    Manual: { OpenGL ES 1.1 }
.\"    Source: pkged by Necib CAPAR(PhD.)
.\"  Language: English
.\"
.TH "GLTEXENV" "3GLesEarliest" "12/21/2021" "pkged by Necib CAPAR(PhD\&.)" "{ OpenGL ES 1\&.1 }"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glTexEnvf, glTexEnvi, glTexEnvx, glTexEnvfv, glTexEnviv, glTexEnvxv \- set texture environment parameters
.SH "C SPECIFICATION"
.HP \w'void\ glTexEnvf('u
.BI "void glTexEnvf(GLenum\ " "target" ", GLenum\ " "pname" ", GLfloat\ " "param" ");"
.HP \w'void\ glTexEnvi('u
.BI "void glTexEnvi(GLenum\ " "target" ", GLenum\ " "pname" ", GLint\ " "param" ");"
.HP \w'void\ glTexEnvx('u
.BI "void glTexEnvx(GLenum\ " "target" ", GLenum\ " "pname" ", GLfixed\ " "param" ");"
.SH "PARAMETERS"
.PP
\fItarget\fR
.RS 4
Specifies a texture environment\&. May be
\fBGL_TEXTURE_ENV\fR
or
\fBGL_POINT_SPRITE_OES\fR\&.
.RE
.PP
\fIpname\fR
.RS 4
Specifies the symbolic name of a single\-valued texture environment parameter\&. May be either
\fBGL_TEXTURE_ENV_MODE\fR,
\fBGL_COMBINE_RGB\fR,
\fBGL_COMBINE_ALPHA\fR,
\fBGL_SRC0_RGB\fR,
\fBGL_SRC1_RGB\fR,
\fBGL_SRC2_RGB\fR,
\fBGL_SRC0_ALPHA\fR,
\fBGL_SRC1_ALPHA\fR,
\fBGL_SRC2_ALPHA\fR,
\fBGL_OPERAND0_RGB\fR,
\fBGL_OPERAND1_RGB\fR,
\fBGL_OPERAND2_RGB\fR,
\fBGL_OPERAND0_ALPHA\fR,
\fBGL_OPERAND1_ALPHA\fR,
\fBGL_OPERAND2_ALPHA\fR,
\fBGL_RGB_SCALE\fR,
\fBGL_ALPHA_SCALE\fR, or
\fBGL_COORD_REPLACE_OES\fR\&.
.RE
.PP
\fIparam\fR
.RS 4
Specifies a single symbolic constant, one of
\fBGL_ADD\fR,
\fBGL_ADD_SIGNED\fR,
\fBGL_DOT3_RGB\fR,
\fBGL_DOT3_RGBA\fR,
\fBGL_INTERPOLATE\fR,
\fBGL_MODULATE\fR,
\fBGL_DECAL\fR,
\fBGL_BLEND\fR,
\fBGL_REPLACE\fR,
\fBGL_SUBTRACT\fR,
\fBGL_COMBINE\fR,
\fBGL_TEXTURE\fR,
\fBGL_CONSTANT\fR,
\fBGL_PRIMARY_COLOR\fR,
\fBGL_PREVIOUS\fR,
\fBGL_SRC_COLOR\fR,
\fBGL_ONE_MINUS_SRC_COLOR\fR,
\fBGL_SRC_ALPHA\fR,
\fBGL_ONE_MINUS_SRC_ALPHA\fR, a single boolean value for the point sprite texture coordinate replacement, or 1\&.0, 2\&.0, or 4\&.0 when specifying the
\fBGL_RGB_SCALE\fR
or
\fBGL_ALPHA_SCALE\fR\&.
.RE
.SH "C SPECIFICATION"
.HP \w'void\ glTexEnvfv('u
.BI "void glTexEnvfv(GLenum\ " "target" ", GLenum\ " "pname" ", const\ GLfloat\ *\ " "params" ");"
.HP \w'void\ glTexEnviv('u
.BI "void glTexEnviv(GLenum\ " "target" ", GLenum\ " "pname" ", const\ GLint\ *\ " "params" ");"
.HP \w'void\ glTexEnvxv('u
.BI "void glTexEnvxv(GLenum\ " "target" ", GLenum\ " "pname" ", const\ GLfixed\ *\ " "params" ");"
.SH "PARAMETERS"
.PP
\fItarget\fR
.RS 4
Specifies a texture environment\&. May be
\fBGL_TEXTURE_ENV\fR
or
\fBGL_POINT_SPRITE_OES\fR\&.
.RE
.PP
\fIpname\fR
.RS 4
Specifies the symbolic name of a single\-valued texture environment parameter\&. May be either
\fBGL_TEXTURE_ENV_MODE\fR,
\fBGL_TEXTURE_ENV_COLOR\fR,
\fBGL_COMBINE_RGB\fR,
\fBGL_COMBINE_ALPHA\fR,
\fBGL_SRC0_RGB\fR,
\fBGL_SRC1_RGB\fR,
\fBGL_SRC2_RGB\fR,
\fBGL_SRC0_ALPHA\fR,
\fBGL_SRC1_ALPHA\fR,
\fBGL_SRC2_ALPHA\fR,
\fBGL_OPERAND0_RGB\fR,
\fBGL_OPERAND1_RGB\fR,
\fBGL_OPERAND2_RGB\fR,
\fBGL_OPERAND0_ALPHA\fR,
\fBGL_OPERAND1_ALPHA\fR,
\fBGL_OPERAND2_ALPHA\fR,
\fBGL_RGB_SCALE\fR,
\fBGL_ALPHA_SCALE\fR, or
\fBGL_COORD_REPLACE_OES\fR\&.
.RE
.PP
\fIparams\fR
.RS 4
Specifies a pointer to a parameter array that contains either an RGBA color, a single symbolic constant, one of
\fBGL_ADD\fR,
\fBGL_ADD_SIGNED\fR,
\fBGL_DOT3_RGB\fR,
\fBGL_DOT3_RGBA\fR,
\fBGL_INTERPOLATE\fR,
\fBGL_MODULATE\fR,
\fBGL_DECAL\fR,
\fBGL_BLEND\fR,
\fBGL_REPLACE\fR,
\fBGL_SUBTRACT\fR,
\fBGL_COMBINE\fR,
\fBGL_TEXTURE\fR,
\fBGL_CONSTANT\fR,
\fBGL_PRIMARY_COLOR\fR,
\fBGL_PREVIOUS\fR,
\fBGL_SRC_COLOR\fR,
\fBGL_ONE_MINUS_SRC_COLOR\fR,
\fBGL_SRC_ALPHA\fR,
\fBGL_ONE_MINUS_SRC_ALPHA\fR, a single boolean value for the point sprite texture coordinate replacement, or 1\&.0, 2\&.0, or 4\&.0 when specifying the
\fBGL_RGB_SCALE\fR
or
\fBGL_ALPHA_SCALE\fR\&.
.RE
.SH "DESCRIPTION"
.PP
A texture environment specifies how texture values are interpreted when a fragment is textured\&. When
\fItarget\fR
is
\fBGL_POINT_SPRITE_OES\fR,
\fIpname\fR
must be
\fBGL_COORD_REPLACE_OES\fR\&. When
\fItarget\fR
is
\fBGL_TEXTURE_ENV\fR,
\fIpname\fR
can be
\fBGL_TEXTURE_ENV_MODE\fR,
\fBGL_TEXTURE_ENV_COLOR\fR,
\fBGL_COMBINE_RGB\fR,
\fBGL_COMBINE_ALPHA\fR,
\fBGL_RGB_SCALE\fR,
\fBGL_ALPHA_SCALE\fR,
\fBGL_OPERAND0_RGB\fR,
\fBGL_OPERAND1_RGB\fR,
\fBGL_OPERAND2_RGB\fR,
\fBGL_OPERAND0_ALPHA\fR,
\fBGL_OPERAND1_ALPHA\fR,
\fBGL_OPERAND2_ALPHA\fR,
\fBGL_SRC0_RGB\fR,
\fBGL_SRC1_RGB\fR,
\fBGL_SRC2_RGB\fR,
\fBGL_SRC0_ALPHA\fR,
\fBGL_SRC1_ALPHA\fR, or
\fBGL_SRC2_ALPHA\fR\&.
.PP
If
\fIpname\fR
is
\fBGL_TEXTURE_ENV_MODE\fR, then
\fIparams\fR
is (or points to) the symbolic name of a texture function\&. Six texture functions may be specified:
\fBGL_ADD\fR,
\fBGL_MODULATE\fR,
\fBGL_DECAL\fR,
\fBGL_BLEND\fR,
\fBGL_REPLACE\fR, or
\fBGL_COMBINE\fR\&.
.PP
The following table shows the correspondence of filtered texture values
Rt,
Gt,
Bt,
At,
Lt
to texture source components\&.
Cs
and
As
are used by the texture functions described below\&.
.PP
.TS
allbox tab(:);
lB cB cB.
T{
Texture Base Internal Format
T}:T{
Cs
T}:T{
As
T}
.T&
l l l
l l l
l l l
l l l
l l l.
T{
\fBGL_ALPHA\fR
T}:T{
(0, 0, 0)
T}:T{
At
T}
T{
\fBGL_LUMINANCE\fR
T}:T{
(Lt, Lt, Lt)
T}:T{
1
T}
T{
\fBGL_LUMINANCE_ALPHA\fR
T}:T{
(Lt, Lt, Lt)
T}:T{
At
T}
T{
\fBGL_RGB\fR
T}:T{
(Rt, Gt, Bt)
T}:T{
1
T}
T{
\fBGL_RGBA\fR
T}:T{
(Rt, Gt, Bt)
T}:T{
At
T}
.TE
.sp 1
.PP
A texture function acts on the fragment to be textured using the texture image value that applies to the fragment (see
\fBglTexParameter\fR()) and produces an RGBA color for that fragment\&. The following table shows how the RGBA color is produced for each of the first five texture functions that can be chosen\&.
C
is a triple of color values (RGB) and
A
is the associated alpha value\&. RGBA values extracted from a texture image are in the range [0,1]\&. The subscript
p
refers to the color computed from the previous texture stage (or the incoming fragment if processing texture stage 0), the subscript
s
to the texture source color, the subscript
c
to the texture environment color, and the subscript
v
indicates a value produced by the texture function\&.
.PP
.TS
allbox expand tab(:);
cB cB cB cB cB cB cB.
T{
Texture Base Internal Format
T}:T{
\fBValue\fR
T}:T{
\fBGL_REPLACE\fR Function
T}:T{
\fBGL_MODULATE\fR Function
T}:T{
\fBGL_DECAL\fR Function
T}:T{
\fBGL_BLEND\fR Function
T}:T{
\fBGL_ADD\fR Function
T}
.T&
c c c c c c c
c c c c c c c
c c c c c c c
c c c c c c c
c c c c c c c
c c c c c c c
c c c c c c c
c c c c c c c
c c c c c c c
c c c c c c c.
T{
\fBGL_ALPHA\fR
T}:T{
Cv =
T}:T{
Cp
T}:T{
Cp
T}:T{
undefined
T}:T{
Cp
T}:T{
Cp
T}
T{

T}:T{
Av =
T}:T{
As
T}:T{
Ap As
T}:T{

T}:T{
Av = Ap As
T}:T{
Ap As
T}
T{
\fBGL_LUMINANCE\fR
T}:T{
Cv =
T}:T{
Cs
T}:T{
Cp Cs
T}:T{
undefined
T}:T{
Cp (1 \- Cs) + Cc Cs
T}:T{
Cp + Cs
T}
T{
(or 1)
T}:T{
Av =
T}:T{
Ap
T}:T{
Ap
T}:T{

T}:T{
Ap
T}:T{
Ap
T}
T{
\fBGL_LUMINANCE_ALPHA\fR
T}:T{
Cv =
T}:T{
Cs
T}:T{
Cp Cs
T}:T{
undefined
T}:T{
Cp (1 \- Cs) + Cc Cs
T}:T{
Cp + Cs
T}
T{
(or 2)
T}:T{
Av =
T}:T{
As
T}:T{
Ap As
T}:T{

T}:T{
Ap As
T}:T{
Ap As
T}
T{
\fBGL_RGB\fR
T}:T{
Cv =
T}:T{
Cs
T}:T{
Cp Cs
T}:T{
Cs
T}:T{
Cp (1 \- Cs) + Cc Cs
T}:T{
Cp + Cs
T}
T{
(or 3)
T}:T{
Av =
T}:T{
Ap
T}:T{
Ap
T}:T{
Ap
T}:T{
Ap
T}:T{
Ap
T}
T{
\fBGL_RGBA\fR
T}:T{
Cv =
T}:T{
Cs
T}:T{
Cp Cs
T}:T{
Cp (1 \- As) + Cs As 
T}:T{
Cp (1 \- Cs) + Cc Cs
T}:T{
Cp + Cs
T}
T{
(or 4)
T}:T{
Av =
T}:T{
As
T}:T{
Ap As
T}:T{
Ap
T}:T{
Ap As
T}:T{
Ap As
T}
.TE
.sp 1
.PP
If
\fIpname\fR
is
\fBGL_TEXTURE_ENV_MODE\fR, and
\fIparams\fR
is
\fBGL_COMBINE\fR, the form of the texture function depends on the values of
\fBGL_COMBINE_RGB\fR
and
\fBGL_COMBINE_ALPHA\fR\&.
.PP
The following describes how the texture sources, as specified by
\fBGL_SRC0_RGB\fR,
\fBGL_SRC1_RGB\fR,
\fBGL_SRC2_RGB\fR,
\fBGL_SRC0_ALPHA\fR,
\fBGL_SRC1_ALPHA\fR, and
\fBGL_SRC2_ALPHA\fR, are combined to produce a final texture color\&. In the following tables,
\fBGL_SRC0_c\fR
is represented by
Arg0,
\fBGL_SRC1_c\fR
is represented by
Arg1, and
\fBGL_SRC2_c\fR
is represented by
Arg2\&.
.PP
\fBGL_COMBINE_RGB\fR
accepts any of
\fBGL_REPLACE\fR,
\fBGL_MODULATE\fR,
\fBGL_ADD\fR,
\fBGL_ADD_SIGNED\fR,
\fBGL_INTERPOLATE\fR,
\fBGL_SUBTRACT\fR,
\fBGL_DOT3_RGB\fR, or
\fBGL_DOT3_RGBA\fR\&.
.PP
.TS
allbox tab(:);
lB lB.
T{
\fB\fR\fB\fBGL_COMBINE_RGB\fR\fR\fB\fR
T}:T{
\fB Texture Function \fR
T}
.T&
l l
l l
l l
l l
l l
l l
l l.
T{
\fBGL_REPLACE\fR
T}:T{
Arg0
T}
T{
\fBGL_MODULATE\fR
T}:T{
Arg0 \(mu Arg1
T}
T{
\fBGL_ADD\fR
T}:T{
Arg0 + Arg1
T}
T{
\fBGL_ADD_SIGNED\fR
T}:T{
Arg0 + Arg1 \- 0\&.5
T}
T{
\fBGL_INTERPOLATE\fR
T}:T{
Arg0 \(mu Arg2 + Arg1 \(mu (1 \- Arg2)
T}
T{
\fBGL_SUBTRACT\fR
T}:T{
Arg0 \- Arg1
T}
T{
\fBGL_DOT3_RGB\fR
or
\fBGL_DOT3_RGBA\fR
T}:T{
4 (((\(mu Arg0r \- 0\&.5) \(mu (Arg1r \- 0\&.5)) + ((Arg0g \- 0\&.5) \(mu (Arg1g \- 0\&.5)) + ((Arg0b \- 0\&.5) \(mu (Arg1b \- 0\&.5)))
T}
.TE
.sp 1
.PP
The scalar results for
\fBGL_DOT3_RGB\fR
and
\fBGL_DOT3_RGBA\fR
are placed into each of the 3 (RGB) or 4 (RGBA) components on output\&.
.PP
Likewise,
\fBGL_COMBINE_ALPHA\fR
accepts any of
\fBGL_REPLACE\fR,
\fBGL_MODULATE\fR,
\fBGL_ADD\fR,
\fBGL_ADD_SIGNED\fR,
\fBGL_INTERPOLATE\fR, or
\fBGL_SUBTRACT\fR\&. The following table describes how alpha values are combined:
.PP
.TS
allbox tab(:);
lB lB.
T{
\fB \fR\fB\fBGL_COMBINE_ALPHA\fR\fR\fB \fR
T}:T{
\fB Texture Function \fR
T}
.T&
l l
l l
l l
l l
l l
l l.
T{
\fBGL_REPLACE\fR
T}:T{
Arg0
T}
T{
\fBGL_MODULATE\fR
T}:T{
Arg0 \(mu Arg1
T}
T{
\fBGL_ADD\fR
T}:T{
Arg0 + Arg1
T}
T{
\fBGL_ADD_SIGNED\fR
T}:T{
Arg0 + Arg1 \- 0\&.5
T}
T{
\fBGL_INTERPOLATE\fR
T}:T{
Arg0 \(mu Arg2 + Arg1 \(mu (1 \- Arg2)
T}
T{
\fBGL_SUBTRACT\fR
T}:T{
Arg0 \- Arg1
T}
.TE
.sp 1
.PP
In the following tables, the value
Cs
represents the color sampled from the currently bound texture,
Cc
represents the constant texture\-environment color,
Cf
represents the primary color of the incoming fragment, and
Cp
represents the color computed from the previous texture stage or
Cf
if processing texture stage 0\&. Likewise,
As,
Ac,
Af, and
Ap
represent the respective alpha values\&.
.PP
The following table describes the values assigned to
Arg0,
Arg1, and
Arg2
based upon the RGB sources and operands:
.PP
.TS
allbox tab(:);
lB lB cB.
T{
\fB \fR\fB\fBGL_SRCn_RGB\fR\fR\fB \fR
T}:T{
\fB \fR\fB\fBGL_OPERANDn_RGB\fR\fR\fB \fR
T}:T{
\fB Argument Value \fR
T}
.T&
l l c
l l c
l l c
l l c
l l c
l l c
l l c
l l c
l l c
l l c
l l c
l l c
l l c
l l c
l l c
l l c
l l c
l l c
l l c
l l c.
T{
\fBGL_TEXTURE\fR
T}:T{
\fBGL_SRC_COLOR\fR
T}:T{
Cs
T}
T{

T}:T{
\fBGL_ONE_MINUS_SRC_COLOR\fR
T}:T{
1 \- Cs
T}
T{

T}:T{
\fBGL_SRC_ALPHA\fR
T}:T{
As
T}
T{

T}:T{
\fBGL_ONE_MINUS_SRC_ALPHA\fR
T}:T{
1 \- As
T}
T{
\fBGL_TEXTUREn\fR
T}:T{
\fBGL_SRC_COLOR\fR
T}:T{
Cs
T}
T{

T}:T{
\fBGL_ONE_MINUS_SRC_COLOR\fR
T}:T{
1 \- Cs
T}
T{

T}:T{
\fBGL_SRC_ALPHA\fR
T}:T{
As
T}
T{

T}:T{
\fBGL_ONE_MINUS_SRC_ALPHA\fR
T}:T{
1 \- As
T}
T{
\fBGL_CONSTANT\fR
T}:T{
\fBGL_SRC_COLOR\fR
T}:T{
Cc
T}
T{

T}:T{
\fBGL_ONE_MINUS_SRC_COLOR\fR
T}:T{
1 \- Cc
T}
T{

T}:T{
\fBGL_SRC_ALPHA\fR
T}:T{
Ac
T}
T{

T}:T{
\fBGL_ONE_MINUS_SRC_ALPHA\fR
T}:T{
1 \- Ac
T}
T{
\fBGL_PRIMARY_COLOR\fR
T}:T{
\fBGL_SRC_COLOR\fR
T}:T{
Cf
T}
T{

T}:T{
\fBGL_ONE_MINUS_SRC_COLOR\fR
T}:T{
1 \- Cf
T}
T{

T}:T{
\fBGL_SRC_ALPHA\fR
T}:T{
Af
T}
T{

T}:T{
\fBGL_ONE_MINUS_SRC_ALPHA\fR
T}:T{
1 \- Af
T}
T{
\fBGL_PREVIOUS\fR
T}:T{
\fBGL_SRC_COLOR\fR
T}:T{
Cp
T}
T{

T}:T{
\fBGL_ONE_MINUS_SRC_COLOR\fR
T}:T{
1 \- Cp
T}
T{

T}:T{
\fBGL_SRC_ALPHA\fR
T}:T{
Ap
T}
T{

T}:T{
\fBGL_ONE_MINUS_SRC_ALPHA\fR
T}:T{
1 \- Ap
T}
.TE
.sp 1
.PP
For
\fBGL_TEXTUREn\fR
sources,
Cs
and
As
represent the color and alpha, respectively, produced from texture stage
n\&.
.PP
The follow table describes the values assigned to
Arg0,
Arg1, and
Arg2
based upon the alpha sources and operands:
.PP
.TS
allbox tab(:);
lB lB cB.
T{
\fB \fR\fB\fBGL_SRCn_ALPHA\fR\fR\fB \fR
T}:T{
\fB \fR\fB\fBGL_OPERANDn_ALPHA\fR\fR\fB \fR
T}:T{
\fB Argument Value \fR
T}
.T&
l l c
l l c
l l c
l l c
l l c
l l c
l l c
l l c
l l c
l l c.
T{
\fBGL_TEXTURE\fR
T}:T{
\fBGL_SRC_ALPHA\fR
T}:T{
As
T}
T{

T}:T{
\fBGL_ONE_MINUS_SRC_ALPHA\fR
T}:T{
1 \- As
T}
T{
\fBGL_TEXTUREn\fR
T}:T{
\fBGL_SRC_ALPHA\fR
T}:T{
As
T}
T{

T}:T{
\fBGL_ONE_MINUS_SRC_ALPHA\fR
T}:T{
1 \- As
T}
T{
\fBGL_CONSTANT\fR
T}:T{
\fBGL_SRC_ALPHA\fR
T}:T{
Ac
T}
T{

T}:T{
\fBGL_ONE_MINUS_SRC_ALPHA\fR
T}:T{
1 \- Ac
T}
T{
\fBGL_PRIMARY_COLOR\fR
T}:T{
\fBGL_SRC_ALPHA\fR
T}:T{
Af
T}
T{

T}:T{
\fBGL_ONE_MINUS_SRC_ALPHA\fR
T}:T{
1 \- Af
T}
T{
\fBGL_PREVIOUS\fR
T}:T{
\fBGL_SRC_ALPHA\fR
T}:T{
Ap
T}
T{

T}:T{
\fBGL_ONE_MINUS_SRC_ALPHA\fR
T}:T{
1 \- Ap
T}
.TE
.sp 1
.PP
The RGB and alpha results of the texture function are multiplied by the values of
\fBGL_RGB_SCALE\fR
and
\fBGL_ALPHA_SCALE\fR, respectively, and clamped to the range
0 1\&.
.PP
If
\fIpname\fR
is
\fBGL_TEXTURE_ENV_COLOR\fR,
\fIparams\fR
is a pointer to an array that holds an RGBA color consisting of four values\&. Integer color components are interpreted linearly such that the most positive integer maps to 1\&.0, and the most negative integer maps to \-1\&.0\&. The values are clamped to the range [0,1] when they are specified\&.
C c
takes these four values\&.
.PP
\fBGL_TEXTURE_ENV_MODE\fR
defaults to
\fBGL_MODULATE\fR
and
\fBGL_TEXTURE_ENV_COLOR\fR
defaults to (0, 0, 0, 0)\&.
.PP
If
\fItarget\fR
is
\fBGL_POINT_SPRITE_OES\fR
and
\fIpname\fR
is
\fBGL_COORD_REPLACE_OES\fR, the boolean value specified is used to either enable or disable point sprite texture coordinate replacement\&. The default value is
\fBGL_FALSE\fR\&.
.SH "NOTES"
.PP
\fBglTexEnv\fR
controls the texture environment for the current active texture unit, selected by
\fBglActiveTexture\fR()\&.
.PP
\fBGL_POINT_SPRITE_OES\fR
and
\fBGL_COORD_REPLACE_OES\fR
are available only if the OpenGL ES version is 1\&.1 or greater\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated when
\fItarget\fR
or
\fIpname\fR
is not one of the accepted defined values, or when
\fIparams\fR
should have a defined constant value (based on the value of
\fIpname\fR) and does not\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if the
\fIparams\fR
value for
\fBGL_RGB_SCALE\fR
or
\fBGL_ALPHA_SCALE\fR
are not one of 1\&.0, 2\&.0, or 4\&.0\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGetTexEnv\fR()
.SH "SEE ALSO"
.PP
\fBglActiveTexture\fR(),
\fBglCompressedTexImage2D\fR(),
\fBglCompressedTexSubImage2D\fR(),
\fBglCopyTexImage2D\fR(),
\fBglCopyTexSubImage2D\fR(),
\fBglTexImage2D\fR(),
\fBglTexParameter\fR(),
\fBglTexSubImage2D\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
2003\-2004 Silicon Graphics, Inc\&. This document is licensed under the SGI Free Software B License\&. For details, see
\m[blue]\fBhttps://khronos\&.org/registry/OpenGL\-Refpages/LICENSES/LicenseRef\-FreeB\&.txt\fR\m[]\&.
