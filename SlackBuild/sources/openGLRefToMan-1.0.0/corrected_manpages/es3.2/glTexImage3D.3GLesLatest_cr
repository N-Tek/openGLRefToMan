'\" t
.\"     Title: glTexImage3D
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 12/21/2021
.\"    Manual: { OpenGL ES 3.2 }
.\"    Source: pkged by Necib CAPAR(PhD.)
.\"  Language: English
.\"
.TH "GLTEXIMAGE3D" "3GLesLatest" "12/21/2021" "pkged by Necib CAPAR(PhD\&.)" "{ OpenGL ES 3\&.2 }"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glTexImage3D \- specify a three\-dimensional texture image
.SH "C SPECIFICATION"
.HP \w'void\ glTexImage3D('u
.BI "void glTexImage3D(GLenum\ " "target" ", GLint\ " "level" ", GLint\ " "internalFormat" ", GLsizei\ " "width" ", GLsizei\ " "height" ", GLsizei\ " "depth" ", GLint\ " "border" ", GLenum\ " "format" ", GLenum\ " "type" ", const\ void\ *\ " "data" ");"
.SH "PARAMETERS"
.PP
\fItarget\fR
.RS 4
Specifies the target texture\&. Must be one of
\fBGL_TEXTURE_3D\fR,
\fBGL_TEXTURE_2D_ARRAY\fR, or
\fBGL_TEXTURE_CUBE_MAP_ARRAY\fR\&.
.RE
.PP
\fIlevel\fR
.RS 4
Specifies the level\-of\-detail number\&. Level 0 is the base image level\&. Level
n
is the
n th
mipmap reduction image\&.
.RE
.PP
\fIinternalFormat\fR
.RS 4
Specifies the number of color components in the texture\&. Must be one of base internal formats given in Table 1, or one of the sized internal formats given in Table 2, below\&.
.RE
.PP
\fIwidth\fR
.RS 4
Specifies the width of the texture image\&. All implementations support 3D texture images that are at least 256 texels wide\&.
.RE
.PP
\fIheight\fR
.RS 4
Specifies the height of the texture image\&. All implementations support 3D texture images that are at least 256 texels high\&.
.RE
.PP
\fIdepth\fR
.RS 4
Specifies the depth of the texture image, or the number of layers in a texture array\&. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep\&.
.RE
.PP
\fIborder\fR
.RS 4
This value must be 0\&.
.RE
.PP
\fIformat\fR
.RS 4
Specifies the format of the pixel data\&. The following symbolic values are accepted:
\fBGL_RED\fR,
\fBGL_RED_INTEGER\fR,
\fBGL_RG\fR,
\fBGL_RG_INTEGER\fR,
\fBGL_RGB\fR,
\fBGL_RGB_INTEGER\fR,
\fBGL_RGBA\fR,
\fBGL_RGBA_INTEGER\fR,
\fBGL_DEPTH_COMPONENT\fR,
\fBGL_DEPTH_STENCIL\fR,
\fBGL_STENCIL_INDEX\fR,
\fBGL_LUMINANCE_ALPHA\fR,
\fBGL_LUMINANCE\fR, and
\fBGL_ALPHA\fR\&.
.RE
.PP
\fItype\fR
.RS 4
Specifies the data type of the pixel data\&. The following symbolic values are accepted:
\fBGL_UNSIGNED_BYTE\fR,
\fBGL_BYTE\fR,
\fBGL_UNSIGNED_SHORT\fR,
\fBGL_SHORT\fR,
\fBGL_UNSIGNED_INT\fR,
\fBGL_INT\fR,
\fBGL_HALF_FLOAT\fR,
\fBGL_FLOAT\fR,
\fBGL_UNSIGNED_SHORT_5_6_5\fR,
\fBGL_UNSIGNED_SHORT_4_4_4_4\fR,
\fBGL_UNSIGNED_SHORT_5_5_5_1\fR,
\fBGL_UNSIGNED_INT_2_10_10_10_REV\fR,
\fBGL_UNSIGNED_INT_10F_11F_11F_REV\fR,
\fBGL_UNSIGNED_INT_5_9_9_9_REV\fR,
\fBGL_UNSIGNED_INT_24_8\fR, and
\fBGL_FLOAT_32_UNSIGNED_INT_24_8_REV\fR\&.
.RE
.PP
\fIdata\fR
.RS 4
Specifies a pointer to the image data in memory\&.
.RE
.SH "DESCRIPTION"
.PP
Texturing allows elements of an image array to be read by shaders\&.
.PP
To define texture images, call
\fBglTexImage3D\fR\&. The arguments describe the parameters of the texture image, such as height, width, depth, width of the border, level\-of\-detail number (see
\fBglTexParameter\fR()), and number of color components provided\&. The last three arguments describe how the image is represented in memory\&.
.PP
If
\fItarget\fR
is
\fBGL_TEXTURE_3D\fR, data is read from
\fIdata\fR
as a sequence of signed or unsigned bytes, shorts, or longs, or single\-precision floating\-point values, depending on
\fItype\fR\&. These values are grouped into sets of one, two, three, or four values, depending on
\fIformat\fR, to form elements\&.
.PP
If a non\-zero named buffer object is bound to the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target (see
\fBglBindBuffer\fR()) while a texture image is specified,
\fIdata\fR
is treated as a byte offset into the buffer object\*(Aqs data store\&.
.PP
The first element corresponds to the lower left corner of the texture image\&. Subsequent elements progress left\-to\-right through the remaining texels in the lowest row of the texture image, and then in successively higher rows of the texture image\&. The final element corresponds to the upper right corner of the texture image\&.
.PP
\fIformat\fR
determines the composition of each element in
\fIdata\fR\&. It can assume one of these symbolic values:
.PP
\fBGL_RED\fR
.RS 4
Each element is a single red component\&. For fixed point normalized components, the GL converts it to floating point, clamps to the range [0,1], and assembles it into an RGBA element by attaching 0\&.0 for green and blue, and 1\&.0 for alpha\&.
.RE
.PP
\fBGL_RED_INTEGER\fR
.RS 4
Each element is a single red component\&. The GL performs assembles it into an RGBA element by attaching 0 for green and blue, and 1 for alpha\&.
.RE
.PP
\fBGL_RG\fR
.RS 4
Each element is a red/green double\&. For fixed point normalized components, the GL converts each component to floating point, clamps to the range [0,1], and assembles them into an RGBA element by attaching 0\&.0 for blue, and 1\&.0 for alpha\&.
.RE
.PP
\fBGL_RG_INTEGER\fR
.RS 4
Each element is a red/green double\&. The GL assembles them into an RGBA element by attaching 0 for blue, and 1 for alpha\&.
.RE
.PP
\fBGL_RGB\fR
.RS 4
Each element is an RGB triple\&. For fixed point normalized components, the GL converts each component to floating point, clamps to the range [0,1], and assembles them into an RGBA element by attaching 1\&.0 for alpha\&.
.RE
.PP
\fBGL_RGB_INTEGER\fR
.RS 4
Each element is an RGB triple\&. The GL assembles them into an RGBA element by attaching 1 for alpha\&.
.RE
.PP
\fBGL_RGBA\fR
.RS 4
Each element contains all four components\&. For fixed point normalized components, the GL converts each component to floating point and clamps them to the range [0,1]\&.
.RE
.PP
\fBGL_RGBA_INTEGER\fR
.RS 4
Each element contains all four components\&.
.RE
.PP
\fBGL_DEPTH_COMPONENT\fR
.RS 4
Each element is a single depth value\&. The GL converts it to floating point, and clamps to the range [0,1]\&.
.RE
.PP
\fBGL_DEPTH_STENCIL\fR
.RS 4
Each element is a pair of depth and stencil values\&. The depth component of the pair is interpreted as in
\fBGL_DEPTH_COMPONENT\fR\&. The stencil component is interpreted based on specified the depth + stencil internal format\&.
.RE
.PP
\fBGL_STENCIL_INDEX\fR
.RS 4
Each element is a single stencil value\&.
.RE
.PP
\fBGL_LUMINANCE_ALPHA\fR
.RS 4
Each element is an luminance/alpha double\&. The GL converts each component to floating point, clamps to the range [0,1], and assembles them into an RGBA element by placing the luminance value in the red, green and blue channels\&.
.RE
.PP
\fBGL_LUMINANCE\fR
.RS 4
Each element is a single luminance component\&. The GL converts it to floating point, clamps to the range [0,1], and assembles it into an RGBA element by placing the luminance value in the red, green and blue channels, and attaching 1\&.0 to the alpha channel\&.
.RE
.PP
\fBGL_ALPHA\fR
.RS 4
Each element is a single alpha component\&. The GL converts it to floating point, clamps to the range [0,1], and assembles it into an RGBA element by placing attaching 0\&.0 to the red, green and blue channels\&.
.RE
.PP
If an application wants to store the texture at a certain resolution or in a certain format, it can request the resolution and format with
\fIinternalFormat\fR\&. The GL will choose an internal representation with least the internal component sizes, and exactly the component types shown for that format, although it may not match exactly\&.
.PP
\fIinternalFormat\fR
may be one of the unsized (base) internal formats shown, together with valid
\fIformat\fR
and
\fItype\fR
combinations, in Table 1, below
.PP
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.B Table\ \&1.\ \&Unsized Internal Formats
.TS
allbox tab(:);
lB lB lB lB lB.
T{
\fBUnsized Internal Format\fR
T}:T{
\fBFormat\fR
T}:T{
\fBType\fR
T}:T{
\fBRGBA and Luminance Values\fR
T}:T{
\fBInternal Components\fR
T}
.T&
l l l l l
l l l l l
l l l l l
l l l l l
l l l l l.
T{
\fBGL_RGB\fR
T}:T{
\fBGL_RGB\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR,
\fBGL_UNSIGNED_SHORT_5_6_5\fR
T}:T{
Red, Green, Blue
T}:T{
R, G, B
T}
T{
\fBGL_RGBA\fR
T}:T{
\fBGL_RGBA\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR,
\fBGL_UNSIGNED_SHORT_4_4_4_4\fR,
\fBGL_UNSIGNED_SHORT_5_5_5_1\fR
T}:T{
Red, Green, Blue, Alpha
T}:T{
R, G, B, A
T}
T{
\fBGL_LUMINANCE_ALPHA\fR
T}:T{
\fBGL_LUMINANCE_ALPHA\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR
T}:T{
Luminance, Alpha
T}:T{
L, A
T}
T{
\fBGL_LUMINANCE\fR
T}:T{
\fBGL_LUMINANCE\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR
T}:T{
Luminance
T}:T{
L
T}
T{
\fBGL_ALPHA\fR
T}:T{
\fBGL_ALPHA\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR
T}:T{
Alpha
T}:T{
A
T}
.TE
.sp 1
.PP
\fIinternalFormat\fR
may also be one of the sized internal formats shown, together with valid
\fIformat\fR
and
\fItype\fR
combinations, in Table 2, below
.PP
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.B Table\ \&2.\ \&Sized Internal Formats
.TS
allbox tab(:);
lB lB lB lB lB lB lB lB lB lB.
T{
\fBSized Internal
.br
Format\fR
T}:T{
\fBFormat\fR
T}:T{
\fBType\fR
T}:T{
\fBRed
.br
Bits\fR
T}:T{
\fBGreen
.br
Bits\fR
T}:T{
\fBBlue
.br
Bits\fR
T}:T{
\fBAlpha
.br
Bits\fR
T}:T{
\fBShared
.br
 Bits\fR
T}:T{
\fBColor
.br
renderable\fR
T}:T{
\fBTexture
.br
 filterable\fR
T}
.T&
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l.
T{
\fBGL_R8\fR
T}:T{
\fBGL_RED\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR
T}:T{
8
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
Y
T}
T{
\fBGL_R8_SNORM\fR
T}:T{
\fBGL_RED\fR
T}:T{
\fBGL_BYTE\fR
T}:T{
s8
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}
T{
\fBGL_R16F\fR
T}:T{
\fBGL_RED\fR
T}:T{
\fBGL_HALF_FLOAT\fR,\fBGL_FLOAT\fR
T}:T{
f16
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
Y
T}
T{
\fBGL_R32F\fR
T}:T{
\fBGL_RED\fR
T}:T{
\fBGL_FLOAT\fR
T}:T{
f32
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_R8UI\fR
T}:T{
\fBGL_RED_INTEGER\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR
T}:T{
ui8
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_R8I\fR
T}:T{
\fBGL_RED_INTEGER\fR
T}:T{
\fBGL_BYTE\fR
T}:T{
i8
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_R16UI\fR
T}:T{
\fBGL_RED_INTEGER\fR
T}:T{
\fBGL_UNSIGNED_SHORT\fR
T}:T{
ui16
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_R16I\fR
T}:T{
\fBGL_RED_INTEGER\fR
T}:T{
\fBGL_SHORT\fR
T}:T{
i16
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_R32UI\fR
T}:T{
\fBGL_RED_INTEGER\fR
T}:T{
\fBGL_UNSIGNED_INT\fR
T}:T{
ui32
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_R32I\fR
T}:T{
\fBGL_RED_INTEGER\fR
T}:T{
\fBGL_INT\fR
T}:T{
i32
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_RG8\fR
T}:T{
\fBGL_RG\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR
T}:T{
8
T}:T{
8
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
Y
T}
T{
\fBGL_RG8_SNORM\fR
T}:T{
\fBGL_RG\fR
T}:T{
\fBGL_BYTE\fR
T}:T{
s8
T}:T{
s8
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}
T{
\fBGL_RG16F\fR
T}:T{
\fBGL_RG\fR
T}:T{
\fBGL_HALF_FLOAT\fR,\fBGL_FLOAT\fR
T}:T{
f16
T}:T{
f16
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
Y
T}
T{
\fBGL_RG32F\fR
T}:T{
\fBGL_RG\fR
T}:T{
\fBGL_FLOAT\fR
T}:T{
f32
T}:T{
f32
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_RG8UI\fR
T}:T{
\fBGL_RG_INTEGER\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR
T}:T{
ui8
T}:T{
ui8
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_RG8I\fR
T}:T{
\fBGL_RG_INTEGER\fR
T}:T{
\fBGL_BYTE\fR
T}:T{
i8
T}:T{
i8
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_RG16UI\fR
T}:T{
\fBGL_RG_INTEGER\fR
T}:T{
\fBGL_UNSIGNED_SHORT\fR
T}:T{
ui16
T}:T{
ui16
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_RG16I\fR
T}:T{
\fBGL_RG_INTEGER\fR
T}:T{
\fBGL_SHORT\fR
T}:T{
i16
T}:T{
i16
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_RG32UI\fR
T}:T{
\fBGL_RG_INTEGER\fR
T}:T{
\fBGL_UNSIGNED_INT\fR
T}:T{
ui32
T}:T{
ui32
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_RG32I\fR
T}:T{
\fBGL_RG_INTEGER\fR
T}:T{
\fBGL_INT\fR
T}:T{
i32
T}:T{
i32
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_RGB8\fR
T}:T{
\fBGL_RGB\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR
T}:T{
8
T}:T{
8
T}:T{
8
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
Y
T}
T{
\fBGL_SRGB8\fR
T}:T{
\fBGL_RGB\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR
T}:T{
8
T}:T{
8
T}:T{
8
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}
T{
\fBGL_RGB565\fR
T}:T{
\fBGL_RGB\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR,
\fBGL_UNSIGNED_SHORT_5_6_5\fR
T}:T{
5
T}:T{
6
T}:T{
5
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
Y
T}
T{
\fBGL_RGB8_SNORM\fR
T}:T{
\fBGL_RGB\fR
T}:T{
\fBGL_BYTE\fR
T}:T{
s8
T}:T{
s8
T}:T{
s8
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}
T{
\fBGL_R11F_G11F_B10F\fR
T}:T{
\fBGL_RGB\fR
T}:T{
\fBGL_UNSIGNED_INT_10F_11F_11F_REV\fR,
\fBGL_HALF_FLOAT\fR,
\fBGL_FLOAT\fR
T}:T{
f11
T}:T{
f11
T}:T{
f10
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
Y
T}
T{
\fBGL_RGB9_E5\fR
T}:T{
\fBGL_RGB\fR
T}:T{
\fBGL_UNSIGNED_INT_5_9_9_9_REV\fR,
\fBGL_HALF_FLOAT\fR,
\fBGL_FLOAT\fR
T}:T{
9
T}:T{
9
T}:T{
9
T}:T{
\ \&
T}:T{
5
T}:T{
\ \&
T}:T{
Y
T}
T{
\fBGL_RGB16F\fR
T}:T{
\fBGL_RGB\fR
T}:T{
\fBGL_HALF_FLOAT\fR,
\fBGL_FLOAT\fR
T}:T{
f16
T}:T{
f16
T}:T{
f16
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}
T{
\fBGL_RGB32F\fR
T}:T{
\fBGL_RGB\fR
T}:T{
\fBGL_FLOAT\fR
T}:T{
f32
T}:T{
f32
T}:T{
f32
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}
T{
\fBGL_RGB8UI\fR
T}:T{
\fBGL_RGB_INTEGER\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR
T}:T{
ui8
T}:T{
ui8
T}:T{
ui8
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}
T{
\fBGL_RGB8I\fR
T}:T{
\fBGL_RGB_INTEGER\fR
T}:T{
\fBGL_BYTE\fR
T}:T{
i8
T}:T{
i8
T}:T{
i8
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}
T{
\fBGL_RGB16UI\fR
T}:T{
\fBGL_RGB_INTEGER\fR
T}:T{
\fBGL_UNSIGNED_SHORT\fR
T}:T{
ui16
T}:T{
ui16
T}:T{
ui16
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}
T{
\fBGL_RGB16I\fR
T}:T{
\fBGL_RGB_INTEGER\fR
T}:T{
\fBGL_SHORT\fR
T}:T{
i16
T}:T{
i16
T}:T{
i16
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}
T{
\fBGL_RGB32UI\fR
T}:T{
\fBGL_RGB_INTEGER\fR
T}:T{
\fBGL_UNSIGNED_INT\fR
T}:T{
ui32
T}:T{
ui32
T}:T{
ui32
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}
T{
\fBGL_RGB32I\fR
T}:T{
\fBGL_RGB_INTEGER\fR
T}:T{
\fBGL_INT\fR
T}:T{
i32
T}:T{
i32
T}:T{
i32
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}
T{
\fBGL_RGBA8\fR
T}:T{
\fBGL_RGBA\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR
T}:T{
8
T}:T{
8
T}:T{
8
T}:T{
8
T}:T{
\ \&
T}:T{
Y
T}:T{
Y
T}
T{
\fBGL_SRGB8_ALPHA8\fR
T}:T{
\fBGL_RGBA\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR
T}:T{
8
T}:T{
8
T}:T{
8
T}:T{
8
T}:T{
\ \&
T}:T{
Y
T}:T{
Y
T}
T{
\fBGL_RGBA8_SNORM\fR
T}:T{
\fBGL_RGBA\fR
T}:T{
\fBGL_BYTE\fR
T}:T{
s8
T}:T{
s8
T}:T{
s8
T}:T{
s8
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}
T{
\fBGL_RGB5_A1\fR
T}:T{
\fBGL_RGBA\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR,
\fBGL_UNSIGNED_SHORT_5_5_5_1\fR,
\fBGL_UNSIGNED_INT_2_10_10_10_REV\fR
T}:T{
5
T}:T{
5
T}:T{
5
T}:T{
1
T}:T{
\ \&
T}:T{
Y
T}:T{
Y
T}
T{
\fBGL_RGBA4\fR
T}:T{
\fBGL_RGBA\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR,
\fBGL_UNSIGNED_SHORT_4_4_4_4\fR
T}:T{
4
T}:T{
4
T}:T{
4
T}:T{
4
T}:T{
\ \&
T}:T{
Y
T}:T{
Y
T}
T{
\fBGL_RGB10_A2\fR
T}:T{
\fBGL_RGBA\fR
T}:T{
\fBGL_UNSIGNED_INT_2_10_10_10_REV\fR
T}:T{
10
T}:T{
10
T}:T{
10
T}:T{
2
T}:T{
\ \&
T}:T{
Y
T}:T{
Y
T}
T{
\fBGL_RGBA16F\fR
T}:T{
\fBGL_RGBA\fR
T}:T{
\fBGL_HALF_FLOAT\fR,
\fBGL_FLOAT\fR
T}:T{
f16
T}:T{
f16
T}:T{
f16
T}:T{
f16
T}:T{
\ \&
T}:T{
Y
T}:T{
Y
T}
T{
\fBGL_RGBA32F\fR
T}:T{
\fBGL_RGBA\fR
T}:T{
\fBGL_FLOAT\fR
T}:T{
f32
T}:T{
f32
T}:T{
f32
T}:T{
f32
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_RGBA8UI\fR
T}:T{
\fBGL_RGBA_INTEGER\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR
T}:T{
ui8
T}:T{
ui8
T}:T{
ui8
T}:T{
ui8
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_RGBA8I\fR
T}:T{
\fBGL_RGBA_INTEGER\fR
T}:T{
\fBGL_BYTE\fR
T}:T{
i8
T}:T{
i8
T}:T{
i8
T}:T{
i8
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_RGB10_A2UI\fR
T}:T{
\fBGL_RGBA_INTEGER\fR
T}:T{
\fBGL_UNSIGNED_INT_2_10_10_10_REV\fR
T}:T{
ui10
T}:T{
ui10
T}:T{
ui10
T}:T{
ui2
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_RGBA16UI\fR
T}:T{
\fBGL_RGBA_INTEGER\fR
T}:T{
\fBGL_UNSIGNED_SHORT\fR
T}:T{
ui16
T}:T{
ui16
T}:T{
ui16
T}:T{
ui16
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_RGBA16I\fR
T}:T{
\fBGL_RGBA_INTEGER\fR
T}:T{
\fBGL_SHORT\fR
T}:T{
i16
T}:T{
i16
T}:T{
i16
T}:T{
i16
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_RGBA32I\fR
T}:T{
\fBGL_RGBA_INTEGER\fR
T}:T{
\fBGL_INT\fR
T}:T{
i32
T}:T{
i32
T}:T{
i32
T}:T{
i32
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_RGBA32UI\fR
T}:T{
\fBGL_RGBA_INTEGER\fR
T}:T{
\fBGL_UNSIGNED_INT\fR
T}:T{
ui32
T}:T{
ui32
T}:T{
ui32
T}:T{
ui32
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
.TE
.sp 1
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.B Table\ \&2.\ \&Sized Internal Formats
.TS
allbox tab(:);
lB lB lB lB lB.
T{
\fBSized Internal Format\fR
T}:T{
\fBFormat\fR
T}:T{
\fBType\fR
T}:T{
\fBDepth Bits\fR
T}:T{
\fBStencil Bits\fR
T}
.T&
l l l l l
l l l l l
l l l l l
l l l l l
l l l l l
l l l l l.
T{
\fBGL_DEPTH_COMPONENT16\fR
T}:T{
\fBGL_DEPTH_COMPONENT\fR
T}:T{
\fBGL_UNSIGNED_SHORT\fR,
\fBGL_UNSIGNED_INT\fR
T}:T{
16
T}:T{
\ \&
T}
T{
\fBGL_DEPTH_COMPONENT24\fR
T}:T{
\fBGL_DEPTH_COMPONENT\fR
T}:T{
\fBGL_UNSIGNED_INT\fR
T}:T{
24
T}:T{
\ \&
T}
T{
\fBGL_DEPTH_COMPONENT32F\fR
T}:T{
\fBGL_DEPTH_COMPONENT\fR
T}:T{
\fBGL_FLOAT\fR
T}:T{
f32
T}:T{
\ \&
T}
T{
\fBGL_DEPTH24_STENCIL8\fR
T}:T{
\fBGL_DEPTH_STENCIL\fR
T}:T{
\fBGL_UNSIGNED_INT_24_8\fR
T}:T{
24
T}:T{
8
T}
T{
\fBGL_DEPTH32F_STENCIL8\fR
T}:T{
\fBGL_DEPTH_STENCIL\fR
T}:T{
\fBGL_FLOAT_32_UNSIGNED_INT_24_8_REV\fR
T}:T{
f32
T}:T{
8
T}
T{
\fBGL_STENCIL_INDEX8\fR
T}:T{
\fBGL_STENCIL_INDEX\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR
T}:T{
\ \&
T}:T{
8
T}
.TE
.sp 1
.PP
If the
\fIinternalFormat\fR
parameter is
\fBGL_SRGB\fR,
\fBGL_SRGB8\fR, or
\fBGL_SRGB8_ALPHA8\fR, the texture is treated as if the red, green, blue, or luminance components are encoded in the sRGB color space\&. Any alpha component is left unchanged\&. The conversion from the sRGB encoded component
c s
to a linear component
c l
is:
.PP
          {  cs
          { -----                 if   cs <= 0.04045
          { 12.92
     cl = {
          { ( cs + 0.055 )^2.4
          { ( ---------- )        if   cs >  0.04045
          { (   1.055    )
.PP
Assume
c s
is the sRGB component in the range [0,1]\&.
.PP
A one\-component texture image uses only the red component of the RGBA color extracted from
\fIdata\fR\&. A two\-component image uses the R and A values\&. A three\-component image uses the R, G, and B values\&. A four\-component image uses all of the RGBA components\&.
.SH "NOTES"
.PP
The
\fBglPixelStorei\fR()
mode affects texture images\&.
.PP
\fIdata\fR
may be a null pointer\&. In this case texture memory is allocated to accommodate a texture of width
\fIwidth\fR, height
\fIheight\fR, and depth
\fIdepth\fR\&. You can then download subtextures to initialize this texture memory\&. The image is undefined if the user tries to apply an uninitialized portion of the texture image to a primitive\&.
.PP
\fBglTexImage3D\fR
specifies the two\-dimensional array, cube map array, or three\-dimensional texture for the texture object bound to the current texture unit, specified with
\fBglActiveTexture\fR()\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fItarget\fR
is not
\fBGL_TEXTURE_3D\fR,
\fBGL_TEXTURE_2D_ARRAY\fR, or
\fBGL_TEXTURE_CUBE_MAP_ARRAY\fR\&.
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fIformat\fR
is not an accepted format constant\&. Format constants other than
\fBGL_STENCIL_INDEX\fR
and
\fBGL_DEPTH_COMPONENT\fR
are accepted\&.
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fItype\fR
is not a type constant\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIlevel\fR
is less than 0\&.
.PP
\fBGL_INVALID_VALUE\fR
may be generated if
\fIlevel\fR
is greater than
log 2 ⁡ max, where
\fImax\fR
is the returned value of
\fBGL_MAX_3D_TEXTURE_SIZE\fR\&.
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fIinternalFormat\fR
is not one of the accepted resolution and format symbolic constants\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fItarget\fR
is
\fBGL_TEXTURE_CUBE_MAP_ARRAY\fR
and
\fIwidth\fR
and
\fIheight\fR
are not equal, or
\fIdepth\fR
is not a multiple of six, indicating 6 * N layer\-faces in the cube map array\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIwidth\fR,
\fIheight\fR, or
\fIdepth\fR
is less than 0 or greater than
\fBGL_MAX_3D_TEXTURE_SIZE\fR\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIborder\fR
is not 0 or 1\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if the combination of
\fIinternalFormat\fR,
\fIformat\fR
and
\fItype\fR
is not one of those in the tables above\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fItarget\fR
is
\fBGL_TEXTURE_3D\fR
and
\fIformat\fR
is
\fBGL_DEPTH_COMPONENT\fR, or
\fBGL_DEPTH_STENCIL\fR\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if a non\-zero buffer object name is bound to the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target and the buffer object\*(Aqs data store is currently mapped\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if a non\-zero buffer object name is bound to the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target and the data would be unpacked from the buffer object such that the memory reads required would exceed the data store size\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if a non\-zero buffer object name is bound to the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target and
\fIdata\fR
is not evenly divisible into the number of bytes needed to store in memory a datum indicated by
\fItype\fR\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_UNPACK_BUFFER_BINDING\fR
.SH "API VERSION SUPPORT"
.TS
allbox tab(:);
lB cB s s s
lB cB cB cB cB.
T{

T}:T{
\fBOpenGL ES API Version\fR
T}
T{
\fBFunction Name\fR
T}:T{
\fB2\&.0\fR
T}:T{
\fB3\&.0\fR
T}:T{
\fB3\&.1\fR
T}:T{
\fB3\&.2\fR
T}
.T&
l c c c c.
T{
glTexImage3D
T}:T{
\-
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}
.TE
.sp 1
.SH "SEE ALSO"
.PP
\fBglActiveTexture\fR(),
\fBglCompressedTexImage2D\fR(),
\fBglCompressedTexImage3D\fR(),
\fBglCompressedTexSubImage2D\fR(),
\fBglCompressedTexSubImage3D\fR(),
\fBglCopyTexImage2D\fR(),
\fBglCopyTexSubImage2D\fR(),
\fBglCopyTexSubImage3D\fR(),
\fBglPixelStorei\fR(),
\fBglTexImage2D\fR(),
\fBglTexSubImage2D\fR(),
\fBglTexSubImage3D\fR(),
\fBglTexParameter\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. Copyright
\(co
2010\-2015 Khronos Group\&. This document is licensed under the SGI Free Software B License\&. For details, see
\m[blue]\fBhttps://khronos\&.org/registry/OpenGL\-Refpages/LICENSES/LicenseRef\-FreeB\&.txt\fR\m[]\&.
.SH "COPYRIGHT"
.br
Copyright \(co 1991-2006 Silicon Graphics, Inc.
.br
Copyright \(co 2010-2015 Khronos Group
.br
