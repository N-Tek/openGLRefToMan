'\" t
.\"     Title: glBlendFuncSeparate
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 12/21/2021
.\"    Manual: { OpenGL ES 3.2 }
.\"    Source: pkged by Necib CAPAR(PhD.)
.\"  Language: English
.\"
.TH "GLBLENDFUNCSEPARATE" "3GLesLatest" "12/21/2021" "pkged by Necib CAPAR(PhD\&.)" "{ OpenGL ES 3\&.2 }"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glBlendFuncSeparate \- specify pixel arithmetic for RGB and alpha components separately
.SH "C SPECIFICATION"
.HP \w'void\ glBlendFuncSeparate('u
.BI "void glBlendFuncSeparate(GLenum\ " "srcRGB" ", GLenum\ " "dstRGB" ", GLenum\ " "srcAlpha" ", GLenum\ " "dstAlpha" ");"
.HP \w'void\ glBlendFuncSeparatei('u
.BI "void glBlendFuncSeparatei(GLuint\ " "buf" ", GLenum\ " "srcRGB" ", GLenum\ " "dstRGB" ", GLenum\ " "srcAlpha" ", GLenum\ " "dstAlpha" ");"
.SH "PARAMETERS"
.PP
\fIbuf\fR
.RS 4
For
\fBglBlendFuncSeparatei\fR, specifies the index of the draw buffer for which to set the blend functions\&.
.RE
.PP
\fIsrcRGB\fR
.RS 4
Specifies how the red, green, and blue blending factors are computed\&. The initial value is
\fBGL_ONE\fR\&.
.RE
.PP
\fIdstRGB\fR
.RS 4
Specifies how the red, green, and blue destination blending factors are computed\&. The initial value is
\fBGL_ZERO\fR\&.
.RE
.PP
\fIsrcAlpha\fR
.RS 4
Specified how the alpha source blending factor is computed\&. The initial value is
\fBGL_ONE\fR\&.
.RE
.PP
\fIdstAlpha\fR
.RS 4
Specified how the alpha destination blending factor is computed\&. The initial value is
\fBGL_ZERO\fR\&.
.RE
.SH "DESCRIPTION"
.PP
Pixels can be drawn using a function that blends the incoming (source) RGBA values with the RGBA values that are already in the frame buffer (the destination values)\&. Blending is initially disabled\&. Use
\fBglEnable\fR()
and
\fBglDisable\fR()
with argument
\fBGL_BLEND\fR
to enable and disable blending\&.
.PP
\fBglBlendFuncSeparate\fR
defines the operation of blending for all draw buffers when it is enabled\&.
\fBglBlendFuncSeparatei\fR
defines the operation of blending for a single draw buffer specified by
\fIbuf\fR
when enabled for that draw buffer\&.
\fIsrcRGB\fR
specifies which method is used to scale the source RGB\-color components\&.
\fIdstRGB\fR
specifies which method is used to scale the destination RGB\-color components\&. Likewise,
\fIsrcAlpha\fR
specifies which method is used to scale the source alpha color component, and
\fIdstAlpha\fR
specifies which method is used to scale the destination alpha component\&. The possible methods are described in the following table\&. Each method defines four scale factors, one each for red, green, blue, and alpha\&.
.PP
In the table and in subsequent equations, source and destination color components are referred to as
(Rs, Gs, Bs, As), and
(Rd, Gd, Bd, Ad), respectively\&. The color specified by
\fBglBlendColor\fR()
is referred to as
(Rc, Gc, Bc, Ac)\&.
.PP
Source and destination scale factors are referred to as
(sR, sG, sB, sA)
and
(dR, dG, dB, dA)\&. All scale factors have range
[0, 1]\&.
.PP
Prior to blending, unsigned normalized fixed\-point color components undergo an implied conversion to floating\-point using equation 2\&.1\&. This conversion must leave the values 0 and 1 invariant\&. Blending computations are treated as if carried out in floating\-point and will be performed with a precision and dynamic range no lower than that used to represent destination components\&. If the value of
\fBGL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING\fR
for the framebuffer attachment corresponding to the destination buffer is
\fBGL_SRGB\fR, the R, G, and B destination color values (after conversion from fixed\-point to floating\-point) are considered to be encoded for the sRGB color space and hence must be linearized prior to their use in blending\&. Each R, G, and B component is converted in the same fashion described for sRGB texture components\&.
.PP
.TS
allbox tab(:);
lB lB lB.
T{
\fB Parameter \fR
T}:T{
\fB RGB Factor \fR
T}:T{
\fB Alpha Factor \fR
T}
.T&
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l.
T{
\fBGL_ZERO\fR
T}:T{
(0, 0, 0)
T}:T{
0
T}
T{
\fBGL_ONE\fR
T}:T{
(1, 1, 1)
T}:T{
1
T}
T{
\fBGL_SRC_COLOR\fR
T}:T{
  Rs  Gs  Bs
.br
( --, --, -- )
.br
  kR  kG  kB
T}:T{
As
.br
--
.br
kA
T}
T{
\fBGL_ONE_MINUS_SRC_COLOR\fR
T}:T{
                 Rs  Gs  Bs
.br
(1, 1, 1)  \-  ( --, --, -- )
.br
                 kR  kG  kB
T}:T{
      As
.br
1  -  --
.br
      kA
T}
T{
\fBGL_DST_COLOR\fR
T}:T{
  Rd  Gd  Bd
.br
( --, --, -- )
.br
  kR  kG  kB
T}:T{
Ad
.br
--
.br
kA
T}
T{
\fBGL_ONE_MINUS_DST_COLOR\fR
T}:T{
                 Rd  Gd  Bd
.br
(1, 1, 1)  \-  ( --, --, -- )
.br
                 kR  kG  kB
T}:T{
    Ad
.br
1 \- --
.br
    kA
T}
T{
\fBGL_SRC_ALPHA\fR
T}:T{
  As  As  As
.br
( --, --, -- )
.br
  kA  kA  kA
T}:T{
As
.br
--
.br
kA
T}
T{
\fBGL_ONE_MINUS_SRC_ALPHA\fR
T}:T{
                    As  As  As
.br
(1, 1, 1, 1)  \-  ( --, --, -- )
.br
                    kA  kA  kA
T}:T{
    As
.br
1 \- --
.br
    kA
T}
T{
\fBGL_DST_ALPHA\fR
T}:T{
  Ad  Ad  Ad
.br
( --, --, -- )
.br
  kA  kA  kA
T}:T{
Ad
.br
--
.br
kA
T}
T{
\fBGL_ONE_MINUS_DST_ALPHA\fR
T}:T{
                 Ad  Ad  Ad
.br
(1, 1, 1)  \-  ( --, --, -- )
.br
                 kA  kA  kA
T}:T{
    Ad
.br
1 \- --
.br
    kA
T}
T{
\fBGL_CONSTANT_COLOR\fR
T}:T{
(Rc, Gc, Bc)
T}:T{
Ac
T}
T{
\fBGL_ONE_MINUS_CONSTANT_COLOR\fR
T}:T{
(1, 1, 1)  \-  ( Rc, Gc, Bc )
T}:T{
1 \- Ac
T}
T{
\fBGL_CONSTANT_ALPHA\fR
T}:T{
(Ac, Ac, Ac)
T}:T{
Ac
T}
T{
\fBGL_ONE_MINUS_CONSTANT_ALPHA\fR
T}:T{
(1, 1, 1)  \-  ( Ac, Ac, Ac )
T}:T{
1 \- Ac
T}
T{
\fBGL_SRC_ALPHA_SATURATE\fR
T}:T{
(i, i, i)
T}:T{
1
T}
.TE
.sp 1
.PP
In the table,
.PP
    i = min(As, 1 \- Ad)
.PP
To determine the blended RGBA values of a pixel, the system uses the following equations:
.PP
    Rd = min(kR, Rs sR + Rd dR) 

.br
    Gd = min(kG, Gs sG + Gd dG)

.br
    Bd = min(kB, Bs sB + Bd dB)

.br
    Ad = min(kA, As sA + Ad dA)
.PP
If the value of
\fBGL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING\fR
for the framebuffer attachment corresponding to the destination buffer is
\fBGL_SRGB\fR, the R, G, and B values after blending are converted into the non\-linear sRGB color space by computing
where cl is the R, G, or B element and cs is the result (effectively converted into an sRGB color space)\&. If
\fBGL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING\fR
is not
\fBGL_SRGB\fR, then cs = cl: The resulting cs values for R, G, and B, and the unmodified A form a new RGBA color value\&. If the color buffer is fixed\-point, each component is clamped to the range [0; 1] and then converted to a fixed\-point value using equation
.SH "NOTES"
.PP
Incoming (source) alpha is correctly thought of as a material opacity, ranging from 1\&.0 (K A), representing complete opacity, to 0\&.0 (0), representing complete transparency\&.
.PP
When more than one color buffer is enabled for drawing, the GL performs blending separately for each enabled buffer, using the contents of that buffer for destination color\&. (See
\fBglDrawBuffers\fR()\&.)
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if either
\fIsrcRGB\fR
or
\fIdstRGB\fR
is not an accepted value\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated by
\fBglBlendFuncSeparatei\fR
if
\fIbuf\fR
is greater than or equal to the value of
\fBGL_MAX_DRAW_BUFFERS\fR\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with argument
\fBGL_BLEND_SRC_RGB\fR
.PP
\fBglGet\fR()
with argument
\fBGL_BLEND_SRC_ALPHA\fR
.PP
\fBglGet\fR()
with argument
\fBGL_BLEND_DST_RGB\fR
.PP
\fBglGet\fR()
with argument
\fBGL_BLEND_DST_ALPHA\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_BLEND\fR
.PP
.SH "API VERSION SUPPORT"
.TS
allbox tab(:);
lB cB s s s
lB cB cB cB cB.
T{

T}:T{
\fBOpenGL ES API Version\fR
T}
T{
\fBFunction Name\fR
T}:T{
\fB2\&.0\fR
T}:T{
\fB3\&.0\fR
T}:T{
\fB3\&.1\fR
T}:T{
\fB3\&.2\fR
T}
.T&
l c c c c
l c c c c.
T{
glBlendFuncSeparate
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}
T{
glBlendFuncSeparatei
T}:T{
\-
T}:T{
\-
T}:T{
\-
T}:T{
✔
T}
.TE
.sp 1
.SH "SEE ALSO"
.PP
\fBglBlendColor\fR(),
\fBglBlendFunc\fR(),
\fBglBlendEquation\fR(),
\fBglBlendEquationSeparate\fR(),
\fBglClear\fR(),
\fBglDrawBuffers\fR(),
\fBglEnable\fR(),
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. Copyright
\(co
2010\-2015 Khronos Group\&. This document is licensed under the SGI Free Software B License\&. For details, see
\m[blue]\fBhttps://khronos\&.org/registry/OpenGL\-Refpages/LICENSES/LicenseRef\-FreeB\&.txt\fR\m[]\&.
.SH "COPYRIGHT"
.br
Copyright \(co 1991-2006 Silicon Graphics, Inc.
.br
Copyright \(co 2010-2015 Khronos Group
.br
