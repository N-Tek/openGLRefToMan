'\" t
.\"     Title: glBlendFunc
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 12/21/2021
.\"    Manual: { OpenGL 4.5 }
.\"    Source: pkged by Necib CAPAR(PhD.)
.\"  Language: English
.\"
.TH "GLBLENDFUNC" "3GLlatest" "12/21/2021" "pkged by Necib CAPAR(PhD\&.)" "{ OpenGL 4\&.5 }"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glBlendFunc \- specify pixel arithmetic
.SH "C SPECIFICATION"
.HP \w'void\ glBlendFunc('u
.BI "void glBlendFunc(GLenum\ " "sfactor" ", GLenum\ " "dfactor" ");"
.HP \w'void\ glBlendFunci('u
.BI "void glBlendFunci(GLuint\ " "buf" ", GLenum\ " "sfactor" ", GLenum\ " "dfactor" ");"
.SH "PARAMETERS"
.PP
\fIbuf\fR
.RS 4
For
\fBglBlendFunci\fR, specifies the index of the draw buffer for which to set the blend function\&.
.RE
.PP
\fIsfactor\fR
.RS 4
Specifies how the red, green, blue, and alpha source blending factors are computed\&. The initial value is
\fBGL_ONE\fR\&.
.RE
.PP
\fIdfactor\fR
.RS 4
Specifies how the red, green, blue, and alpha destination blending factors are computed\&. The following symbolic constants are accepted:
\fBGL_ZERO\fR,
\fBGL_ONE\fR,
\fBGL_SRC_COLOR\fR,
\fBGL_ONE_MINUS_SRC_COLOR\fR,
\fBGL_DST_COLOR\fR,
\fBGL_ONE_MINUS_DST_COLOR\fR,
\fBGL_SRC_ALPHA\fR,
\fBGL_ONE_MINUS_SRC_ALPHA\fR,
\fBGL_DST_ALPHA\fR,
\fBGL_ONE_MINUS_DST_ALPHA\fR\&.
\fBGL_CONSTANT_COLOR\fR,
\fBGL_ONE_MINUS_CONSTANT_COLOR\fR,
\fBGL_CONSTANT_ALPHA\fR, and
\fBGL_ONE_MINUS_CONSTANT_ALPHA\fR\&. The initial value is
\fBGL_ZERO\fR\&.
.RE
.SH "DESCRIPTION"
.PP
Pixels can be drawn using a function that blends the incoming (source) RGBA values with the RGBA values that are already in the frame buffer (the destination values)\&. Blending is initially disabled\&. Use
\fBglEnable\fR()
and
\fBglDisable\fR
with argument
\fBGL_BLEND\fR
to enable and disable blending\&.
.PP
\fBglBlendFunc\fR
defines the operation of blending for all draw buffers when it is enabled\&.
\fBglBlendFunci\fR
defines the operation of blending for a single draw buffer specified by
\fIbuf\fR
when enabled for that draw buffer\&.
\fIsfactor\fR
specifies which method is used to scale the source color components\&.
\fIdfactor\fR
specifies which method is used to scale the destination color components\&. Both parameters must be one of the following symbolic constants:
\fBGL_ZERO\fR,
\fBGL_ONE\fR,
\fBGL_SRC_COLOR\fR,
\fBGL_ONE_MINUS_SRC_COLOR\fR,
\fBGL_DST_COLOR\fR,
\fBGL_ONE_MINUS_DST_COLOR\fR,
\fBGL_SRC_ALPHA\fR,
\fBGL_ONE_MINUS_SRC_ALPHA\fR,
\fBGL_DST_ALPHA\fR,
\fBGL_ONE_MINUS_DST_ALPHA\fR,
\fBGL_CONSTANT_COLOR\fR,
\fBGL_ONE_MINUS_CONSTANT_COLOR\fR,
\fBGL_CONSTANT_ALPHA\fR,
\fBGL_ONE_MINUS_CONSTANT_ALPHA\fR,
\fBGL_SRC_ALPHA_SATURATE\fR,
\fBGL_SRC1_COLOR\fR,
\fBGL_ONE_MINUS_SRC1_COLOR\fR,
\fBGL_SRC1_ALPHA\fR, and
\fBGL_ONE_MINUS_SRC1_ALPHA\fR\&. The possible methods are described in the following table\&. Each method defines four scale factors, one each for red, green, blue, and alpha\&. In the table and in subsequent equations, first source, second source and destination color components are referred to as
(Rs0, Gs0, Bs0, As0),
(Rs1, Gs1, Bs1, As1)
and
(Rd, Gd, Bd, Ad), respectively\&. The color specified by
\fBglBlendColor\fR()
is referred to as
(Rc, Gc, Bc, Ac)\&. They are understood to have integer values between 0 and
(kR, kG, kB, kA), where
.PP
    kc = 2^mc \- 1
.PP
and
(mR, mG, mB, mA)
is the number of red, green, blue, and alpha bitplanes\&.
.PP
Source and destination scale factors are referred to as
(sR, sG, sB, sA)
and
(dR, dG, dB, dA)\&. The scale factors described in the table, denoted
(fR, fG, fB, fA), represent either source or destination factors\&. All scale factors have range
[0, 1]\&.
.PP
.TS
allbox tab(:);
lB lB.
T{
\fB Parameter \fR
T}:T{
\fB(\fR\fBfR, fG, fB, fA\fR\fB)\fR
T}
.T&
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l.
T{
\fBGL_ZERO\fR
T}:T{
(0, 0, 0, 0)
T}
T{
\fBGL_ONE\fR
T}:T{
(1, 1, 1, 1)
T}
T{
\fBGL_SRC_COLOR\fR
T}:T{
  Rs0  Gs0  Bs0  As0 
.br
( ---, ---, ---, --- )
.br
  kR   kG   kB   kA
T}
T{
\fBGL_ONE_MINUS_SRC_COLOR\fR
T}:T{
                  Rs0  Gs0  Bs0  As0 
.br
(1, 1, 1, 1) \- ( ---, ---, ---, --- )
.br
                  kR   kG   kB   kA
T}
T{
\fBGL_DST_COLOR\fR
T}:T{
  Rd  Gd  Bd  Ad 
.br
( --, --, --, --- )
.br
  kR  kG  kB  kA
T}
T{
\fBGL_ONE_MINUS_DST_COLOR\fR
T}:T{
                  Rd  Gd  Bd  Ad 
.br
(1, 1, 1, 1) \- ( --, --, --, --- )
.br
                  kR  kG  kB  kA
T}
T{
\fBGL_SRC_ALPHA\fR
T}:T{
  As0  As0  As0  As0 
.br
( ---, ---, ---, --- )
.br
  kA   kA   kA   kA
T}
T{
\fBGL_ONE_MINUS_SRC_ALPHA\fR
T}:T{
                  As0  As0  As0  As0 
.br
(1, 1, 1, 1) \- ( ---, ---, ---, --- )
.br
                  kA   kA   kA   kA
T}
T{
\fBGL_DST_ALPHA\fR
T}:T{
  Ad  Ad  Ad  Ad 
.br
( --, --, --, --- )
.br
  kA  kA  kA  kA
T}
T{
\fBGL_ONE_MINUS_DST_ALPHA\fR
T}:T{
                  Ad  Ad  Ad  Ad 
.br
(1, 1, 1, 1) \- ( --, --, --, --- )
.br
                  kA  kA  kA  kA

T}
T{
\fBGL_CONSTANT_COLOR\fR
T}:T{
(Rc, Gc, Bc, Ac)
T}
T{
\fBGL_ONE_MINUS_CONSTANT_COLOR\fR
T}:T{
(1, 1, 1, 1) \- (Rc, Gc, Bc, Ac)
T}
T{
\fBGL_CONSTANT_ALPHA\fR
T}:T{
(Ac, Ac, Ac, Ac)
T}
T{
\fBGL_ONE_MINUS_CONSTANT_ALPHA\fR
T}:T{
(1, 1, 1, 1) \- (Ac, Ac, Ac, Ac)
T}
T{
\fBGL_SRC_ALPHA_SATURATE\fR
T}:T{
(i, i, i, 1)
T}
T{
\fBGL_SRC1_COLOR\fR
T}:T{
  Rs1  Gs1  Bs1  As1 
.br
( ---, ---, ---, --- )
.br
  kR   kG   kB   kA
T}
T{
\fBGL_ONE_MINUS_SRC1_COLOR\fR
T}:T{
                  Rs1  Gs1  Bs1  As1 
.br
(1, 1, 1, 1) \- ( ---, ---, ---, --- )
.br
                  kR   kG   kB   kA
T}
T{
\fBGL_SRC1_ALPHA\fR
T}:T{
  As1  As1  As1  As1 
.br
( ---, ---, ---, --- )
.br
  kA   kA   kA   kA
T}
T{
\fBGL_ONE_MINUS_SRC1_ALPHA\fR
T}:T{
                  As1  As1  As1  As1 
.br
(1, 1, 1, 1) \- ( ---, ---, ---, --- )
.br
                  kA   kA   kA   kA
T}
.TE
.sp 1
.PP
In the table,
.PP
    i = min(As kA \- Ad) / kA
.PP
To determine the blended RGBA values of a pixel, the system uses the following equations:
.PP
    Rd = min(kR, Rs sR + Rd dR) 

.br
    Gd = min(kG, Gs sG + Gd dG)

.br
    Bd = min(kB, Bs sB + Bd dB)

.br
    Ad = min(kA, As sA + Ad dA)
.PP
Despite the apparent precision of the above equations, blending arithmetic is not exactly specified, because blending operates with imprecise integer color values\&. However, a blend factor that should be equal to 1 is guaranteed not to modify its multiplicand, and a blend factor equal to 0 reduces its multiplicand to 0\&. For example, when
\fIsfactor\fR
is
\fBGL_SRC_ALPHA\fR,
\fIdfactor\fR
is
\fBGL_ONE_MINUS_SRC_ALPHA\fR, and
A s
is equal to
k A, the equations reduce to simple replacement:
.PP
    Rd = Rs
.br
    Gd = Gs
.br
    Bd = Bs
.br
    Ad = As
.PP
.SH "EXAMPLES"
.PP
.PP
Transparency is best implemented using blend function (\fBGL_SRC_ALPHA\fR,
\fBGL_ONE_MINUS_SRC_ALPHA\fR) with primitives sorted from farthest to nearest\&. Note that this transparency calculation does not require the presence of alpha bitplanes in the frame buffer\&.
.PP
Blend function (\fBGL_SRC_ALPHA\fR,
\fBGL_ONE_MINUS_SRC_ALPHA\fR) is also useful for rendering antialiased points and lines in arbitrary order\&.
.PP
Polygon antialiasing is optimized using blend function (\fBGL_SRC_ALPHA_SATURATE\fR,
\fBGL_ONE\fR) with polygons sorted from nearest to farthest\&. (See the
\fBglEnable\fR(),
\fBglDisable\fR
reference page and the
\fBGL_POLYGON_SMOOTH\fR
argument for information on polygon antialiasing\&.) Destination alpha bitplanes, which must be present for this blend function to operate correctly, store the accumulated coverage\&.
.SH "NOTES"
.PP
Incoming (source) alpha is correctly thought of as a material opacity, ranging from 1\&.0 (K A), representing complete opacity, to 0\&.0 (0), representing complete transparency\&.
.PP
When more than one color buffer is enabled for drawing, the GL performs blending separately for each enabled buffer, using the contents of that buffer for destination color\&. (See
\fBglDrawBuffer\fR()\&.)
.PP
When dual source blending is enabled (i\&.e\&., one of the blend factors requiring the second color input is used), the maximum number of enabled draw buffers is given by
\fBGL_MAX_DUAL_SOURCE_DRAW_BUFFERS\fR, which may be lower than
\fBGL_MAX_DRAW_BUFFERS\fR\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if either
\fIsfactor\fR
or
\fIdfactor\fR
is not an accepted value\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated by
\fBglBlendFunci\fR
if
\fIbuf\fR
is greater than or equal to the value of
\fBGL_MAX_DRAW_BUFFERS\fR\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with argument
\fBGL_BLEND_SRC_RGB\fR
.PP
\fBglGet\fR()
with argument
\fBGL_BLEND_SRC_ALPHA\fR
.PP
\fBglGet\fR()
with argument
\fBGL_BLEND_DST_RGB\fR
.PP
\fBglGet\fR()
with argument
\fBGL_BLEND_DST_ALPHA\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_BLEND\fR
.PP
.SH "VERSION SUPPORT"
.TS
allbox tab(:);
lB cB s s s s s s s s s s s
lB cB cB cB cB cB cB cB cB cB cB cB cB.
T{

T}:T{
\fBOpenGL Version\fR
T}
T{
\fBFunction / Feature Name\fR
T}:T{
\fB2\&.0\fR
T}:T{
\fB2\&.1\fR
T}:T{
\fB3\&.0\fR
T}:T{
\fB3\&.1\fR
T}:T{
\fB3\&.2\fR
T}:T{
\fB3\&.3\fR
T}:T{
\fB4\&.0\fR
T}:T{
\fB4\&.1\fR
T}:T{
\fB4\&.2\fR
T}:T{
\fB4\&.3\fR
T}:T{
\fB4\&.4\fR
T}:T{
\fB4\&.5\fR
T}
.T&
l c c c c c c c c c c c c
l c c c c c c c c c c c c.
T{
\fBglBlendFunc\fR
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}
T{
\fBglBlendFunci\fR
T}:T{
\-
T}:T{
\-
T}:T{
\-
T}:T{
\-
T}:T{
\-
T}:T{
\-
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}
.TE
.sp 1
.SH "SEE ALSO"
.PP
\fBglBlendColor\fR(),
\fBglBlendEquation\fR(),
\fBglBlendFuncSeparate\fR(),
\fBglClear\fR(),
\fBglDrawBuffer\fR(),
\fBglEnable\fR(),
\fBglLogicOp\fR(),
\fBglStencilFunc\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. Copyright
\(co
2010\-2014 Khronos Group\&. This document is licensed under the SGI Free Software B License\&. For details, see
\m[blue]\fBhttps://khronos\&.org/registry/OpenGL\-Refpages/LICENSES/LicenseRef\-FreeB\&.txt\fR\m[]\&.
.SH "COPYRIGHT"
.br
Copyright \(co 1991-2006 Silicon Graphics, Inc.
.br
Copyright \(co 2010-2014 Khronos Group
.br
