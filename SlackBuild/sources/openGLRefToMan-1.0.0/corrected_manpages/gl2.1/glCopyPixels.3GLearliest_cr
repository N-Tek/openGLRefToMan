'\" t
.\"     Title: glCopyPixels
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 12/21/2021
.\"    Manual: { OpenGL 2.1 }
.\"    Source: pkged by Necib CAPAR(PhD.)
.\"  Language: English
.\"
.TH "GLCOPYPIXELS" "3GLearliest" "12/21/2021" "pkged by Necib CAPAR(PhD\&.)" "{ OpenGL 2\&.1 }"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glCopyPixels \- copy pixels in the frame buffer
.SH "C SPECIFICATION"
.HP \w'void\ glCopyPixels('u
.BI "void glCopyPixels(GLint\ " "x" ", GLint\ " "y" ", GLsizei\ " "width" ", GLsizei\ " "height" ", GLenum\ " "type" ");"
.SH "PARAMETERS"
.PP
\fIx\fR, \fIy\fR
.RS 4
Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied\&.
.RE
.PP
\fIwidth\fR, \fIheight\fR
.RS 4
Specify the dimensions of the rectangular region of pixels to be copied\&. Both must be nonnegative\&.
.RE
.PP
\fItype\fR
.RS 4
Specifies whether color values, depth values, or stencil values are to be copied\&. Symbolic constants
\fBGL_COLOR\fR,
\fBGL_DEPTH\fR, and
\fBGL_STENCIL\fR
are accepted\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglCopyPixels\fR
copies a screen\-aligned rectangle of pixels from the specified frame buffer location to a region relative to the current raster position\&. Its operation is well defined only if the entire pixel source region is within the exposed portion of the window\&. Results of copies from outside the window, or from regions of the window that are not exposed, are hardware dependent and undefined\&.
.PP
\fIx\fR
and
\fIy\fR
specify the window coordinates of the lower left corner of the rectangular region to be copied\&.
\fIwidth\fR
and
\fIheight\fR
specify the dimensions of the rectangular region to be copied\&. Both
\fIwidth\fR
and
\fIheight\fR
must not be negative\&.
.PP
Several parameters control the processing of the pixel data while it is being copied\&. These parameters are set with three commands:
\fBglPixelTransfer\fR(),
\fBglPixelMap\fR(), and
\fBglPixelZoom\fR()\&. This reference page describes the effects on
\fBglCopyPixels\fR
of most, but not all, of the parameters specified by these three commands\&.
.PP
\fBglCopyPixels\fR
copies values from each pixel with the lower left\-hand corner at
(x + i, y + j)
for
0 <= i < width
and
0 <= j < height\&. This pixel is said to be the
ith pixel in the
jth row\&. Pixels are copied in row order from the lowest to the highest row, left to right in each row\&.
.PP
\fItype\fR
specifies whether color, depth, or stencil data is to be copied\&. The details of the transfer for each data type are as follows:
.PP
\fBGL_COLOR\fR
.RS 4
Indices or RGBA colors are read from the buffer currently specified as the read source buffer (see
\fBglReadBuffer\fR())\&. If the GL is in color index mode, each index that is read from this buffer is converted to a fixed\-point format with an unspecified number of bits to the right of the binary point\&. Each index is then shifted left by
\fBGL_INDEX_SHIFT\fR
bits, and added to
\fBGL_INDEX_OFFSET\fR\&. If
\fBGL_INDEX_SHIFT\fR
is negative, the shift is to the right\&. In either case, zero bits fill otherwise unspecified bit locations in the result\&. If
\fBGL_MAP_COLOR\fR
is true, the index is replaced with the value that it references in lookup table
\fBGL_PIXEL_MAP_I_TO_I\fR\&. Whether the lookup replacement of the index is done or not, the integer part of the index is then ANDed with
2^b \- 1, where
b
is the number of bits in a color index buffer\&.
.sp
If the GL is in RGBA mode, the red, green, blue, and alpha components of each pixel that is read are converted to an internal floating\-point format with unspecified precision\&. The conversion maps the largest representable component value to 1\&.0, and component value 0 to 0\&.0\&. The resulting floating\-point color values are then multiplied by
\fBGL_c_SCALE\fR
and added to
\fBGL_c_BIAS\fR, where
\fIc\fR
is RED, GREEN, BLUE, and ALPHA for the respective color components\&. The results are clamped to the range [0,1]\&. If
\fBGL_MAP_COLOR\fR
is true, each color component is scaled by the size of lookup table
\fBGL_PIXEL_MAP_c_TO_c\fR, then replaced by the value that it references in that table\&.
\fIc\fR
is R, G, B, or A\&.
.sp
If the
ARB_imaging
extension is supported, the color values may be additionally processed by color\-table lookups, color\-matrix transformations, and convolution filters\&.
.sp
The GL then converts the resulting indices or RGBA colors to fragments by attaching the current raster position
\fIz\fR
coordinate and texture coordinates to each pixel, then assigning window coordinates
(xr + i, yr + j), where
(xr, yr)
is the current raster position, and the pixel was the
ith pixel in the
jth row\&. These pixel fragments are then treated just like the fragments generated by rasterizing points, lines, or polygons\&. Texture mapping, fog, and all the fragment operations are applied before the fragments are written to the frame buffer\&.
.RE
.PP
\fBGL_DEPTH\fR
.RS 4
Depth values are read from the depth buffer and converted directly to an internal floating\-point format with unspecified precision\&. The resulting floating\-point depth value is then multiplied by
\fBGL_DEPTH_SCALE\fR
and added to
\fBGL_DEPTH_BIAS\fR\&. The result is clamped to the range [0,1]\&.
.sp
The GL then converts the resulting depth components to fragments by attaching the current raster position color or color index and texture coordinates to each pixel, then assigning window coordinates
(xr + i, yr + j), where
(xr, yr)
is the current raster position, and the pixel was the
ith pixel in the
jth row\&. These pixel fragments are then treated just like the fragments generated by rasterizing points, lines, or polygons\&. Texture mapping, fog, and all the fragment operations are applied before the fragments are written to the frame buffer\&.
.RE
.PP
\fBGL_STENCIL\fR
.RS 4
Stencil indices are read from the stencil buffer and converted to an internal fixed\-point format with an unspecified number of bits to the right of the binary point\&. Each fixed\-point index is then shifted left by
\fBGL_INDEX_SHIFT\fR
bits, and added to
\fBGL_INDEX_OFFSET\fR\&. If
\fBGL_INDEX_SHIFT\fR
is negative, the shift is to the right\&. In either case, zero bits fill otherwise unspecified bit locations in the result\&. If
\fBGL_MAP_STENCIL\fR
is true, the index is replaced with the value that it references in lookup table
\fBGL_PIXEL_MAP_S_TO_S\fR\&. Whether the lookup replacement of the index is done or not, the integer part of the index is then ANDed with
2^b \- 1, where
b
is the number of bits in the stencil buffer\&. The resulting stencil indices are then written to the stencil buffer such that the index read from the
ith location of the
jth row is written to location
(xr + i, yr + j), where
(xr, yr)
is the current raster position\&. Only the pixel ownership test, the scissor test, and the stencil writemask affect these write operations\&.
.RE
.PP
The rasterization described thus far assumes pixel zoom factors of 1\&.0\&. If
\fBglPixelZoom\fR()
is used to change the
x
and
y
pixel zoom factors, pixels are converted to fragments as follows\&. If
(xr, yr)
is the current raster position, and a given pixel is in the
ith location in the
jth row of the source pixel rectangle, then fragments are generated for pixels whose centers are in the rectangle with corners at
.PP
(xr + zoomx i, yr + zoomy j)
.PP
and
.PP
(xr + zoomx(i + 1), yr + zoomy(j + 1))
.PP
where
zoomx
is the value of
\fBGL_ZOOM_X\fR
and
zoomy
is the value of
\fBGL_ZOOM_Y\fR\&.
.SH "EXAMPLES"
.PP
To copy the color pixel in the lower left corner of the window to the current raster position, use
.PP
.if n \{\
.RS 4
.\}
.nf
glCopyPixels(0, 0, 1, 1, \fBGL_COLOR\fR);
            
.fi
.if n \{\
.RE
.\}
.PP
.SH "NOTES"
.PP
Modes specified by
\fBglPixelStore\fR()
have no effect on the operation of
\fBglCopyPixels\fR\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fItype\fR
is not an accepted value\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if either
\fIwidth\fR
or
\fIheight\fR
is negative\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fItype\fR
is
\fBGL_DEPTH\fR
and there is no depth buffer\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fItype\fR
is
\fBGL_STENCIL\fR
and there is no stencil buffer\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fBglCopyPixels\fR
is executed between the execution of
\fBglBegin\fR()
and the corresponding execution of
\fBglEnd\fR()\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_POSITION\fR
.PP
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_POSITION_VALID\fR
.SH "SEE ALSO"
.PP
\fBglColorTable\fR(),
\fBglConvolutionFilter1D\fR(),
\fBglConvolutionFilter2D\fR(),
\fBglDepthFunc\fR(),
\fBglDrawBuffer\fR(),
\fBglDrawPixels\fR(),
\fBglMatrixMode\fR(),
\fBglPixelMap\fR(),
\fBglPixelTransfer\fR(),
\fBglPixelZoom\fR(),
\fBglRasterPos\fR(),
\fBglReadBuffer\fR(),
\fBglReadPixels\fR(),
\fBglSeparableFilter2D\fR(),
\fBglStencilFunc\fR(),
\fBglWindowPos\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. This document is licensed under the SGI Free Software B License\&. For details, see
\m[blue]\fBhttps://khronos\&.org/registry/OpenGL\-Refpages/LICENSES/LicenseRef\-FreeB\&.txt\fR\m[]\&.
