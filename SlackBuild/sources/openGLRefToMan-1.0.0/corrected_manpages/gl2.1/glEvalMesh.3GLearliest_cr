'\" t
.\"     Title: glEvalMesh
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 12/21/2021
.\"    Manual: { OpenGL 2.1 }
.\"    Source: pkged by Necib CAPAR(PhD.)
.\"  Language: English
.\"
.TH "GLEVALMESH" "3GLearliest" "12/21/2021" "pkged by Necib CAPAR(PhD\&.)" "{ OpenGL 2\&.1 }"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glEvalMesh \- compute a one\- or two\-dimensional grid of points or lines
.SH "C SPECIFICATION"
.HP \w'void\ glEvalMesh1('u
.BI "void glEvalMesh1(GLenum\ " "mode" ", GLint\ " "i1" ", GLint\ " "i2" ");"
.SH "PARAMETERS"
.PP
\fImode\fR
.RS 4
In
\fBglEvalMesh1\fR, specifies whether to compute a one\-dimensional mesh of points or lines\&. Symbolic constants
\fBGL_POINT\fR
and
\fBGL_LINE\fR
are accepted\&.
.RE
.PP
\fIi1\fR, \fIi2\fR
.RS 4
Specify the first and last integer values for grid domain variable
i\&.
.RE
.SH "C SPECIFICATION"
.HP \w'void\ glEvalMesh2('u
.BI "void glEvalMesh2(GLenum\ " "mode" ", GLint\ " "i1" ", GLint\ " "i2" ", GLint\ " "j1" ", GLint\ " "j2" ");"
.SH "PARAMETERS"
.PP
\fImode\fR
.RS 4
In
\fBglEvalMesh2\fR, specifies whether to compute a two\-dimensional mesh of points, lines, or polygons\&. Symbolic constants
\fBGL_POINT\fR,
\fBGL_LINE\fR, and
\fBGL_FILL\fR
are accepted\&.
.RE
.PP
\fIi1\fR, \fIi2\fR
.RS 4
Specify the first and last integer values for grid domain variable
i\&.
.RE
.PP
\fIj1\fR, \fIj2\fR
.RS 4
Specify the first and last integer values for grid domain variable
j\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglMapGrid\fR()
and
\fBglEvalMesh\fR
are used in tandem to efficiently generate and evaluate a series of evenly\-spaced map domain values\&.
\fBglEvalMesh\fR
steps through the integer domain of a one\- or two\-dimensional grid, whose range is the domain of the evaluation maps specified by
\fBglMap1\fR()
and
\fBglMap2\fR()\&.
\fImode\fR
determines whether the resulting vertices are connected as points, lines, or filled polygons\&.
.PP
In the one\-dimensional case,
\fBglEvalMesh1\fR, the mesh is generated as if the following code fragment were executed:
.PP
.if n \{\
.RS 4
.\}
.nf
glBegin( \fItype\fR );
for ( i = \fIi1\fR; i <= \fIi2\fR; i += 1 )
   glEvalCoord1(i \(md delta(u) + u1);
glEnd();
            
.fi
.if n \{\
.RE
.\}
.sp
where
.PP
                (u2 \- u1)
    delta(u) =  ----------
                    n
.PP
and
n,
u1, and
u2
are the arguments to the most recent
\fBglMapGrid1\fR()
command\&.
\fItype\fR
is
\fBGL_POINTS\fR
if
\fImode\fR
is
\fBGL_POINT\fR, or
\fBGL_LINES\fR
if
\fImode\fR
is
\fBGL_LINE\fR\&.
.PP
The one absolute numeric requirement is that if
i = n, then the value computed from
i \(md delta(u) + u1
is exactly
u2\&.
.PP
In the two\-dimensional case,
\fBglEvalMesh2\fR, let \&.cp

.br
    delta(u) = (u2 \- u1) / n
.PP
    delta(v) = (v2 \- v1) / m
.PP
where
n,
u1,
u2,
m,
v1, and
v2
are the arguments to the most recent
\fBglMapGrid2\fR()
command\&. Then, if
\fImode\fR
is
\fBGL_FILL\fR, the
\fBglEvalMesh2\fR
command is equivalent to:
.PP
.if n \{\
.RS 4
.\}
.nf
for ( j = \fIj1\fR; j < \fIj2\fR; j += 1 ) {
   glBegin( GL_QUAD_STRIP );
   for ( i = \fIi1\fR; i <= \fIi2\fR; i += 1 ) {
      glEvalCoord2(i \(md delta(u) + u1 , j \(md delta(v) + v1);
      glEvalCoord2(i \(md delta(u) + u1 , (j + 1) \(md delta(v) + v1);
   }
   glEnd();
}
            
.fi
.if n \{\
.RE
.\}
.PP
If
\fImode\fR
is
\fBGL_LINE\fR, then a call to
\fBglEvalMesh2\fR
is equivalent to:
.PP
.if n \{\
.RS 4
.\}
.nf
for ( j = \fIj1\fR; j <= \fIj2\fR; j += 1 ) {
   glBegin( GL_LINE_STRIP );
   for ( i = \fIi1\fR; i <= \fIi2\fR; i += 1 )
      glEvalCoord2(i \(md delta(u) + u1 , j \(md delta(v) + v1);
   glEnd();
}

for ( i = \fIi1\fR;  i <= \fIi2\fR; i += 1 ) {
   glBegin( GL_LINE_STRIP );
   for ( j = \fIj1\fR; j <= \fIj1\fR; j += 1 )
      glEvalCoord2(i \(md delta(u) + u1 , j \(md delta(v) + v1);
   glEnd();
}
            
.fi
.if n \{\
.RE
.\}
.PP
And finally, if
\fImode\fR
is
\fBGL_POINT\fR, then a call to
\fBglEvalMesh2\fR
is equivalent to:
.PP
.if n \{\
.RS 4
.\}
.nf
glBegin( GL_POINTS );
for ( j = \fIj1\fR; j <= \fIj2\fR; j += 1 )
   for ( i = \fIi1\fR; i <= \fIi2\fR; i += 1 )
      glEvalCoord2( i \(md delta(u) + u1 , j \(md delta(v) + v1);
glEnd();
            
.fi
.if n \{\
.RE
.\}
.PP
In all three cases, the only absolute numeric requirements are that if
i = n, then the value computed from
i \(md delta(u) + u1
is exactly
u2, and if
j = m, then the value computed from
j \(md delta(v) + v1
is exactly
v2\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fImode\fR
is not an accepted value\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fBglEvalMesh\fR
is executed between the execution of
\fBglBegin\fR()
and the corresponding execution of
\fBglEnd\fR()\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with argument
\fBGL_MAP1_GRID_DOMAIN\fR
.PP
\fBglGet\fR()
with argument
\fBGL_MAP2_GRID_DOMAIN\fR
.PP
\fBglGet\fR()
with argument
\fBGL_MAP1_GRID_SEGMENTS\fR
.PP
\fBglGet\fR()
with argument
\fBGL_MAP2_GRID_SEGMENTS\fR
.SH "SEE ALSO"
.PP
\fBglBegin\fR(),
\fBglEvalCoord\fR(),
\fBglEvalPoint\fR(),
\fBglMap1\fR(),
\fBglMap2\fR(),
\fBglMapGrid\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. This document is licensed under the SGI Free Software B License\&. For details, see
\m[blue]\fBhttps://khronos\&.org/registry/OpenGL\-Refpages/LICENSES/LicenseRef\-FreeB\&.txt\fR\m[]\&.
