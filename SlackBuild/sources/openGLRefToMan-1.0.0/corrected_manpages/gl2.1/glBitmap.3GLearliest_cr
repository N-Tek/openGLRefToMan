'\" t
.\"     Title: glBitmap
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 12/21/2021
.\"    Manual: { OpenGL 2.1 }
.\"    Source: pkged by Necib CAPAR(PhD.)
.\"  Language: English
.\"
.TH "GLBITMAP" "3GLearliest" "12/21/2021" "pkged by Necib CAPAR(PhD\&.)" "{ OpenGL 2\&.1 }"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glBitmap \- draw a bitmap
.SH "C SPECIFICATION"
.HP \w'void\ glBitmap('u
.BI "void glBitmap(GLsizei\ " "width" ", GLsizei\ " "height" ", GLfloat\ " "xorig" ", GLfloat\ " "yorig" ", GLfloat\ " "xmove" ", GLfloat\ " "ymove" ", const\ GLubyte\ *\ " "bitmap" ");"
.SH "PARAMETERS"
.PP
\fIwidth\fR, \fIheight\fR
.RS 4
Specify the pixel width and height of the bitmap image\&.
.RE
.PP
\fIxorig\fR, \fIyorig\fR
.RS 4
Specify the location of the origin in the bitmap image\&. The origin is measured from the lower left corner of the bitmap, with right and up being the positive axes\&.
.RE
.PP
\fIxmove\fR, \fIymove\fR
.RS 4
Specify the
\fIx\fR
and
\fIy\fR
offsets to be added to the current raster position after the bitmap is drawn\&.
.RE
.PP
\fIbitmap\fR
.RS 4
Specifies the address of the bitmap image\&.
.RE
.SH "DESCRIPTION"
.PP
A bitmap is a binary image\&. When drawn, the bitmap is positioned relative to the current raster position, and frame buffer pixels corresponding to 1\*(Aqs in the bitmap are written using the current raster color or index\&. Frame buffer pixels corresponding to 0\*(Aqs in the bitmap are not modified\&.
.PP
\fBglBitmap\fR
takes seven arguments\&. The first pair specifies the width and height of the bitmap image\&. The second pair specifies the location of the bitmap origin relative to the lower left corner of the bitmap image\&. The third pair of arguments specifies
\fIx\fR
and
\fIy\fR
offsets to be added to the current raster position after the bitmap has been drawn\&. The final argument is a pointer to the bitmap image itself\&.
.PP
If a non\-zero named buffer object is bound to the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target (see
\fBglBindBuffer\fR()) while a bitmap image is specified,
\fIbitmap\fR
is treated as a byte offset into the buffer object\*(Aqs data store\&.
.PP
The bitmap image is interpreted like image data for the
\fBglDrawPixels\fR()
command, with
\fIwidth\fR
and
\fIheight\fR
corresponding to the width and height arguments of that command, and with
\fItype\fR
set to
\fBGL_BITMAP\fR
and
\fIformat\fR
set to
\fBGL_COLOR_INDEX\fR\&. Modes specified using
\fBglPixelStore\fR()
affect the interpretation of bitmap image data; modes specified using
\fBglPixelTransfer\fR()
do not\&.
.PP
If the current raster position is invalid,
\fBglBitmap\fR
is ignored\&. Otherwise, the lower left corner of the bitmap image is positioned at the window coordinates
.PP
xw = floor(xr \- xo)
.PP
yw = floor(yr \- yo)
.PP
where
(xr, yr)
is the raster position and)
(xo, yo)
is the bitmap origin\&. Fragments are then generated for each pixel corresponding to a 1 (one) in the bitmap image\&. These fragments are generated using the current raster
\fIz\fR
coordinate, color or color index, and current raster texture coordinates\&. They are then treated just as if they had been generated by a point, line, or polygon, including texture mapping, fogging, and all per\-fragment operations such as alpha and depth testing\&.
.PP
After the bitmap has been drawn, the
\fIx\fR
and
\fIy\fR
coordinates of the current raster position are offset by
\fIxmove\fR
and
\fIymove\fR\&. No change is made to the
\fIz\fR
coordinate of the current raster position, or to the current raster color, texture coordinates, or index\&.
.SH "NOTES"
.PP
To set a valid raster position outside the viewport, first set a valid raster position inside the viewport, then call
\fBglBitmap\fR
with NULL as the
\fIbitmap\fR
parameter and with
\fIxmove\fR
and
\fIymove\fR
set to the offsets of the new raster position\&. This technique is useful when panning an image around the viewport\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIwidth\fR
or
\fIheight\fR
is negative\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if a non\-zero buffer object name is bound to the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target and the buffer object\*(Aqs data store is currently mapped\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if a non\-zero buffer object name is bound to the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target and the data would be unpacked from the buffer object such that the memory reads required would exceed the data store size\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fBglBitmap\fR
is executed between the execution of
\fBglBegin\fR()
and the corresponding execution of
\fBglEnd\fR()\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_POSITION\fR
.PP
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_COLOR\fR
.PP
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_SECONDARY_COLOR\fR
.PP
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_DISTANCE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_INDEX\fR
.PP
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_TEXTURE_COORDS\fR
.PP
\fBglGet\fR()
with argument
\fBGL_CURRENT_RASTER_POSITION_VALID\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_UNPACK_BUFFER_BINDING\fR
.SH "SEE ALSO"
.PP
\fBglBindBuffer\fR(),
\fBglDrawPixels\fR(),
\fBglPixelStore\fR(),
\fBglPixelTransfer\fR(),
\fBglRasterPos\fR(),
\fBglWindowPos\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. This document is licensed under the SGI Free Software B License\&. For details, see
\m[blue]\fBhttps://khronos\&.org/registry/OpenGL\-Refpages/LICENSES/LicenseRef\-FreeB\&.txt\fR\m[]\&.
