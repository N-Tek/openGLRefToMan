'\" t
.\"     Title: glEvalCoord
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 12/21/2021
.\"    Manual: { OpenGL 2.1 }
.\"    Source: pkged by Necib CAPAR(PhD.)
.\"  Language: English
.\"
.TH "GLEVALCOORD" "3GLearliest" "12/21/2021" "pkged by Necib CAPAR(PhD\&.)" "{ OpenGL 2\&.1 }"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glEvalCoord \- evaluate enabled one\- and two\-dimensional maps
.SH "C SPECIFICATION"
.HP \w'void\ glEvalCoord1f('u
.BI "void glEvalCoord1f(GLfloat\ " "u" ");"
.HP \w'void\ glEvalCoord1d('u
.BI "void glEvalCoord1d(GLdouble\ " "u" ");"
.HP \w'void\ glEvalCoord2f('u
.BI "void glEvalCoord2f(GLfloat\ " "u" ", GLfloat\ " "v" ");"
.HP \w'void\ glEvalCoord2d('u
.BI "void glEvalCoord2d(GLdouble\ " "u" ", GLdouble\ " "v" ");"
.SH "PARAMETERS"
.PP
\fIu\fR
.RS 4
Specifies a value that is the domain coordinate
u
to the basis function defined in a previous
\fBglMap1\fR()
or
\fBglMap2\fR()
command\&.
.RE
.PP
\fIv\fR
.RS 4
Specifies a value that is the domain coordinate
v
to the basis function defined in a previous
\fBglMap2\fR()
command\&. This argument is not present in a
\fBglEvalCoord1\fR
command\&.
.RE
.SH "C SPECIFICATION"
.HP \w'void\ glEvalCoord1fv('u
.BI "void glEvalCoord1fv(const\ GLfloat\ *\ " "u" ");"
.HP \w'void\ glEvalCoord1dv('u
.BI "void glEvalCoord1dv(const\ GLdouble\ *\ " "u" ");"
.HP \w'void\ glEvalCoord2fv('u
.BI "void glEvalCoord2fv(const\ GLfloat\ *\ " "u" ");"
.HP \w'void\ glEvalCoord2dv('u
.BI "void glEvalCoord2dv(const\ GLdouble\ *\ " "u" ");"
.SH "PARAMETERS"
.PP
\fIu\fR
.RS 4
Specifies a pointer to an array containing either one or two domain coordinates\&. The first coordinate is
u\&. The second coordinate is
v, which is present only in
\fBglEvalCoord2\fR
versions\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglEvalCoord1\fR
evaluates enabled one\-dimensional maps at argument
\fIu\fR\&.
\fBglEvalCoord2\fR
does the same for two\-dimensional maps using two domain values,
\fIu\fR
and
\fIv\fR\&. To define a map, call
\fBglMap1\fR()
and
\fBglMap2\fR(); to enable and disable it, call
\fBglEnable\fR()
and
\fBglDisable\fR()\&.
.PP
When one of the
\fBglEvalCoord\fR
commands is issued, all currently enabled maps of the indicated dimension are evaluated\&. Then, for each enabled map, it is as if the corresponding GL command had been issued with the computed value\&. That is, if
\fBGL_MAP1_INDEX\fR
or
\fBGL_MAP2_INDEX\fR
is enabled, a
\fBglIndex\fR()
command is simulated\&. If
\fBGL_MAP1_COLOR_4\fR
or
\fBGL_MAP2_COLOR_4\fR
is enabled, a
\fBglColor\fR()
command is simulated\&. If
\fBGL_MAP1_NORMAL\fR
or
\fBGL_MAP2_NORMAL\fR
is enabled, a normal vector is produced, and if any of
\fBGL_MAP1_TEXTURE_COORD_1\fR,
\fBGL_MAP1_TEXTURE_COORD_2\fR,
\fBGL_MAP1_TEXTURE_COORD_3\fR,
\fBGL_MAP1_TEXTURE_COORD_4\fR,
\fBGL_MAP2_TEXTURE_COORD_1\fR,
\fBGL_MAP2_TEXTURE_COORD_2\fR,
\fBGL_MAP2_TEXTURE_COORD_3\fR, or
\fBGL_MAP2_TEXTURE_COORD_4\fR
is enabled, then an appropriate
\fBglTexCoord\fR()
command is simulated\&.
.PP
For color, color index, normal, and texture coordinates the GL uses evaluated values instead of current values for those evaluations that are enabled, and current values otherwise, However, the evaluated values do not update the current values\&. Thus, if
\fBglVertex\fR()
commands are interspersed with
\fBglEvalCoord\fR
commands, the color, normal, and texture coordinates associated with the
\fBglVertex\fR()
commands are not affected by the values generated by the
\fBglEvalCoord\fR
commands, but only by the most recent
\fBglColor\fR(),
\fBglIndex\fR(),
\fBglNormal\fR(), and
\fBglTexCoord\fR()
commands\&.
.PP
No commands are issued for maps that are not enabled\&. If more than one texture evaluation is enabled for a particular dimension (for example,
\fBGL_MAP2_TEXTURE_COORD_1\fR
and
\fBGL_MAP2_TEXTURE_COORD_2\fR), then only the evaluation of the map that produces the larger number of coordinates (in this case,
\fBGL_MAP2_TEXTURE_COORD_2\fR) is carried out\&.
\fBGL_MAP1_VERTEX_4\fR
overrides
\fBGL_MAP1_VERTEX_3\fR, and
\fBGL_MAP2_VERTEX_4\fR
overrides
\fBGL_MAP2_VERTEX_3\fR, in the same manner\&. If neither a three\- nor a four\-component vertex map is enabled for the specified dimension, the
\fBglEvalCoord\fR
command is ignored\&.
.PP
If you have enabled automatic normal generation, by calling
\fBglEnable\fR()
with argument
\fBGL_AUTO_NORMAL\fR,
\fBglEvalCoord2\fR
generates surface normals analytically, regardless of the contents or enabling of the
\fBGL_MAP2_NORMAL\fR
map\&. Let
.PP
    m = ∂ p ∂ u \(mu ∂ p ∂ v
.PP
Then the generated normal
n
is
.br
         m 
.br
    n = ---
.br
        |m|
.br
.PP
If automatic normal generation is disabled, the corresponding normal map
\fBGL_MAP2_NORMAL\fR, if enabled, is used to produce a normal\&. If neither automatic normal generation nor a normal map is enabled, no normal is generated for
\fBglEvalCoord2\fR
commands\&.
.SH "ASSOCIATED GETS"
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_VERTEX_3\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_VERTEX_4\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_INDEX\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_COLOR_4\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_NORMAL\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_TEXTURE_COORD_1\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_TEXTURE_COORD_2\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_TEXTURE_COORD_3\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_TEXTURE_COORD_4\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP2_VERTEX_3\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP2_VERTEX_4\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP2_INDEX\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP2_COLOR_4\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP2_NORMAL\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP2_TEXTURE_COORD_1\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP2_TEXTURE_COORD_2\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP2_TEXTURE_COORD_3\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP2_TEXTURE_COORD_4\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_AUTO_NORMAL\fR
.PP
\fBglGetMap\fR()
.SH "SEE ALSO"
.PP
\fBglBegin\fR(),
\fBglColor\fR(),
\fBglEnable\fR(),
\fBglEvalMesh\fR(),
\fBglEvalPoint\fR(),
\fBglIndex\fR(),
\fBglMap1\fR(),
\fBglMap2\fR(),
\fBglMapGrid\fR(),
\fBglNormal\fR(),
\fBglTexCoord\fR(),
\fBglVertex\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. This document is licensed under the SGI Free Software B License\&. For details, see
\m[blue]\fBhttps://khronos\&.org/registry/OpenGL\-Refpages/LICENSES/LicenseRef\-FreeB\&.txt\fR\m[]\&.
