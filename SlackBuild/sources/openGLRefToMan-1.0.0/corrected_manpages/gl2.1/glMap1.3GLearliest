'\" t
.\"     Title: glMap1
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 12/21/2021
.\"    Manual: { OpenGL 2.1 }
.\"    Source: pkged by Necib CAPAR(PhD.)
.\"  Language: English
.\"
.TH "GLMAP1" "3GLearliest" "12/21/2021" "pkged by Necib CAPAR(PhD\&.)" "{ OpenGL 2\&.1 }"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glMap1 \- define a one\-dimensional evaluator
.SH "C SPECIFICATION"
.HP \w'void\ glMap1f('u
.BI "void glMap1f(GLenum\ " "target" ", GLfloat\ " "u1" ", GLfloat\ " "u2" ", GLint\ " "stride" ", GLint\ " "order" ", const\ GLfloat\ *\ " "points" ");"
.HP \w'void\ glMap1d('u
.BI "void glMap1d(GLenum\ " "target" ", GLdouble\ " "u1" ", GLdouble\ " "u2" ", GLint\ " "stride" ", GLint\ " "order" ", const\ GLdouble\ *\ " "points" ");"
.SH "PARAMETERS"
.PP
\fItarget\fR
.RS 4
Specifies the kind of values that are generated by the evaluator\&. Symbolic constants
\fBGL_MAP1_VERTEX_3\fR,
\fBGL_MAP1_VERTEX_4\fR,
\fBGL_MAP1_INDEX\fR,
\fBGL_MAP1_COLOR_4\fR,
\fBGL_MAP1_NORMAL\fR,
\fBGL_MAP1_TEXTURE_COORD_1\fR,
\fBGL_MAP1_TEXTURE_COORD_2\fR,
\fBGL_MAP1_TEXTURE_COORD_3\fR, and
\fBGL_MAP1_TEXTURE_COORD_4\fR
are accepted\&.
.RE
.PP
\fIu1\fR, \fIu2\fR
.RS 4
Specify a linear mapping of
u, as presented to
\fBglEvalCoord1\fR(), to
u^, the variable that is evaluated by the equations specified by this command\&.
.RE
.PP
\fIstride\fR
.RS 4
Specifies the number of floats or doubles between the beginning of one control point and the beginning of the next one in the data structure referenced in
\fIpoints\fR\&. This allows control points to be embedded in arbitrary data structures\&. The only constraint is that the values for a particular control point must occupy contiguous memory locations\&.
.RE
.PP
\fIorder\fR
.RS 4
Specifies the number of control points\&. Must be positive\&.
.RE
.PP
\fIpoints\fR
.RS 4
Specifies a pointer to the array of control points\&.
.RE
.SH "DESCRIPTION"
.PP
Evaluators provide a way to use polynomial or rational polynomial mapping to produce vertices, normals, texture coordinates, and colors\&. The values produced by an evaluator are sent to further stages of GL processing just as if they had been presented using
\fBglVertex\fR(),
\fBglNormal\fR(),
\fBglTexCoord\fR(), and
\fBglColor\fR()
commands, except that the generated values do not update the current normal, texture coordinates, or color\&.
.PP
All polynomial or rational polynomial splines of any degree (up to the maximum degree supported by the GL implementation) can be described using evaluators\&. These include almost all splines used in computer graphics: B\-splines, Bezier curves, Hermite splines, and so on\&.
.PP
Evaluators define curves based on Bernstein polynomials\&. Define
p ⁡ u^
as
.PP
p ⁡ u^ = Σ i = 0 n B i n ⁡ u^ ⁢ R i
.PP
.PP
where
R i
is a control point and
B i n ⁡ u^
is the
ith Bernstein polynomial of degree
n
(\fIorder\fR
=
n + 1):
.PP
B i n ⁡ u^ = n i ⁢ u^ i ⁢ 1 \- u^ n \- i
.PP
Recall that
.PP
0 0 == 1
and
n 0 == 1
.PP
\fBglMap1\fR
is used to define the basis and to specify what kind of values are produced\&. Once defined, a map can be enabled and disabled by calling
\fBglEnable\fR()
and
\fBglDisable\fR()
with the map name, one of the nine predefined values for
\fItarget\fR
described below\&.
\fBglEvalCoord1\fR()
evaluates the one\-dimensional maps that are enabled\&. When
\fBglEvalCoord1\fR()
presents a value
u, the Bernstein functions are evaluated using
u^, where
u^ = u \- u1 u2 \- u1
.PP
\fItarget\fR
is a symbolic constant that indicates what kind of control points are provided in
\fIpoints\fR, and what output is generated when the map is evaluated\&. It can assume one of nine predefined values:
.PP
\fBGL_MAP1_VERTEX_3\fR
.RS 4
Each control point is three floating\-point values representing
x,
y, and
z\&. Internal
\fBglVertex3\fR()
commands are generated when the map is evaluated\&.
.RE
.PP
\fBGL_MAP1_VERTEX_4\fR
.RS 4
Each control point is four floating\-point values representing
x,
y,
z, and
w\&. Internal
\fBglVertex4\fR()
commands are generated when the map is evaluated\&.
.RE
.PP
\fBGL_MAP1_INDEX\fR
.RS 4
Each control point is a single floating\-point value representing a color index\&. Internal
\fBglIndex\fR()
commands are generated when the map is evaluated but the current index is not updated with the value of these
\fBglIndex\fR()
commands\&.
.RE
.PP
\fBGL_MAP1_COLOR_4\fR
.RS 4
Each control point is four floating\-point values representing red, green, blue, and alpha\&. Internal
\fBglColor4\fR()
commands are generated when the map is evaluated but the current color is not updated with the value of these
\fBglColor4\fR()
commands\&.
.RE
.PP
\fBGL_MAP1_NORMAL\fR
.RS 4
Each control point is three floating\-point values representing the
x,
y, and
z
components of a normal vector\&. Internal
\fBglNormal\fR()
commands are generated when the map is evaluated but the current normal is not updated with the value of these
\fBglNormal\fR()
commands\&.
.RE
.PP
\fBGL_MAP1_TEXTURE_COORD_1\fR
.RS 4
Each control point is a single floating\-point value representing the
s
texture coordinate\&. Internal
\fBglTexCoord1\fR()
commands are generated when the map is evaluated but the current texture coordinates are not updated with the value of these
\fBglTexCoord\fR()
commands\&.
.RE
.PP
\fBGL_MAP1_TEXTURE_COORD_2\fR
.RS 4
Each control point is two floating\-point values representing the
s
and
t
texture coordinates\&. Internal
\fBglTexCoord2\fR()
commands are generated when the map is evaluated but the current texture coordinates are not updated with the value of these
\fBglTexCoord\fR()
commands\&.
.RE
.PP
\fBGL_MAP1_TEXTURE_COORD_3\fR
.RS 4
Each control point is three floating\-point values representing the
s,
t, and
r
texture coordinates\&. Internal
\fBglTexCoord3\fR()
commands are generated when the map is evaluated but the current texture coordinates are not updated with the value of these
\fBglTexCoord\fR()
commands\&.
.RE
.PP
\fBGL_MAP1_TEXTURE_COORD_4\fR
.RS 4
Each control point is four floating\-point values representing the
s,
t,
r, and
q
texture coordinates\&. Internal
\fBglTexCoord4\fR()
commands are generated when the map is evaluated but the current texture coordinates are not updated with the value of these
\fBglTexCoord\fR()
commands\&.
.RE
.PP
\fIstride\fR,
\fIorder\fR, and
\fIpoints\fR
define the array addressing for accessing the control points\&.
\fIpoints\fR
is the location of the first control point, which occupies one, two, three, or four contiguous memory locations, depending on which map is being defined\&.
\fIorder\fR
is the number of control points in the array\&.
\fIstride\fR
specifies how many float or double locations to advance the internal memory pointer to reach the next control point\&.
.SH "NOTES"
.PP
As is the case with all GL commands that accept pointers to data, it is as if the contents of
\fIpoints\fR
were copied by
\fBglMap1\fR
before
\fBglMap1\fR
returns\&. Changes to the contents of
\fIpoints\fR
have no effect after
\fBglMap1\fR
is called\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fItarget\fR
is not an accepted value\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIu1\fR
is equal to
\fIu2\fR\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIstride\fR
is less than the number of values in a control point\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIorder\fR
is less than 1 or greater than the return value of
\fBGL_MAX_EVAL_ORDER\fR\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fBglMap1\fR
is executed between the execution of
\fBglBegin\fR()
and the corresponding execution of
\fBglEnd\fR()\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fBglMap1\fR
is called and the value of
\fBGL_ACTIVE_TEXTURE\fR
is not
\fBGL_TEXTURE0\fR\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGetMap\fR()
.PP
\fBglGet\fR()
with argument
\fBGL_MAX_EVAL_ORDER\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_VERTEX_3\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_VERTEX_4\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_INDEX\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_COLOR_4\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_NORMAL\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_TEXTURE_COORD_1\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_TEXTURE_COORD_2\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_TEXTURE_COORD_3\fR
.PP
\fBglIsEnabled\fR()
with argument
\fBGL_MAP1_TEXTURE_COORD_4\fR
.SH "SEE ALSO"
.PP
\fBglBegin\fR(),
\fBglColor\fR(),
\fBglEnable\fR(),
\fBglEvalCoord\fR(),
\fBglEvalMesh\fR(),
\fBglEvalPoint\fR(),
\fBglMap2\fR(),
\fBglMapGrid\fR(),
\fBglNormal\fR(),
\fBglTexCoord\fR(),
\fBglVertex\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. This document is licensed under the SGI Free Software B License\&. For details, see
\m[blue]\fBhttps://khronos\&.org/registry/OpenGL\-Refpages/LICENSES/LicenseRef\-FreeB\&.txt\fR\m[]\&.
