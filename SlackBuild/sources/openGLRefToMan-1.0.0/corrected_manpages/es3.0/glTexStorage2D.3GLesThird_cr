'\" t
.\"     Title: glTexStorage2D
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 12/21/2021
.\"    Manual: { OpenGL ES 3.0 }
.\"    Source: pkged by Necib CAPAR(PhD.)
.\"  Language: English
.\"
.TH "GLTEXSTORAGE2D" "3GLesThird" "12/21/2021" "pkged by Necib CAPAR(PhD\&.)" "{ OpenGL ES 3\&.0 }"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glTexStorage2D \- simultaneously specify storage for all levels of a two\-dimensional texture
.SH "C SPECIFICATION"
.HP \w'void\ glTexStorage2D('u
.BI "void glTexStorage2D(GLenum\ " "target" ", GLsizei\ " "levels" ", GLenum\ " "internalformat" ", GLsizei\ " "width" ", GLsizei\ " "height" ");"
.SH "PARAMETERS"
.PP
\fItarget\fR
.RS 4
Specify the target of the operation\&.
\fItarget\fR
must be one of
\fBGL_TEXTURE_2D\fR, or
\fBGL_TEXTURE_CUBE_MAP\fR\&.
.RE
.PP
\fIlevels\fR
.RS 4
Specify the number of texture levels\&.
.RE
.PP
\fIinternalformat\fR
.RS 4
Specifies the sized internal format to be used to store texture image data\&.
.RE
.PP
\fIwidth\fR
.RS 4
Specifies the width of the texture, in texels\&.
.RE
.PP
\fIheight\fR
.RS 4
Specifies the height of the texture, in texels\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglTexStorage2D\fR
specifies the storage requirements for all levels of a two\-dimensional texture simultaneously\&. Once a texture is specified with this command, the format and dimensions of all levels become immutable\&. The contents of the image may still be modified, however, its storage requirements may not change\&. Such a texture is referred to as an
\fIimmutable\-format\fR
texture\&.
.PP
The behavior of
\fBglTexStorage2D\fR
depends on the
\fItarget\fR
parameter\&. When
\fItarget\fR
is
\fBGL_TEXTURE_2D\fR, calling
\fBglTexStorage2D\fR
is equivalent, assuming no errors are generated, to executing the following pseudo\-code:
.sp
.if n \{\
.RS 4
.\}
.nf
    for (i = 0; i < levels; i++)
    {
        glTexImage2D(target, i, internalformat, width, height, 0, format, type, NULL);
        width = max(1, (width / 2));
        height = max(1, (height / 2));
    }
.fi
.if n \{\
.RE
.\}
.PP
When
\fItarget\fR
is
\fBGL_TEXTURE_CUBE_MAP\fR,
\fBglTexStorage2D\fR
is equivalent to:
.sp
.if n \{\
.RS 4
.\}
.nf
    for (i = 0; i < levels; i++)
    {
        for (face in (+X, \-X, +Y, \-Y, +Z, \-Z))
        {
            glTexImage2D(face, i, internalformat, width, height, 0, format, type, NULL);
        }
        width = max(1, (width / 2));
        height = max(1, (height / 2));
    }
.fi
.if n \{\
.RE
.\}
.PP
Since no texture data is actually provided, the values used in the pseudo\-code for
\fIformat\fR
and
\fItype\fR
are irrelevant and may be considered to be any values that are legal for the chosen
\fIinternalformat\fR
enumerant\&.
\fIinternalformat\fR
must be one of the sized internal formats given in Table 1, or one of the compressed internal formats given in Table 2 below\&. Upon success, the value of
\fBGL_TEXTURE_IMMUTABLE_FORMAT\fR
becomes
\fBGL_TRUE\fR\&. The value of
\fBGL_TEXTURE_IMMUTABLE_FORMAT\fR
may be discovered by calling
\fBglGetTexParameter\fR()
with
\fIpname\fR
set to
\fBGL_TEXTURE_IMMUTABLE_FORMAT\fR\&. No further changes to the dimensions or format of the texture object may be made\&. Using any command that might alter the dimensions or format of the texture object (such as
\fBglTexImage2D\fR()
or another call to
\fBglTexStorage2D\fR) will result in the generation of a
\fBGL_INVALID_OPERATION\fR
error, even if it would not, in fact, alter the dimensions or format of the object\&.
.PP
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.B Table\ \&1.\ \&Sized Internal Formats
.TS
allbox tab(:);
lB lB lB lB lB lB lB lB lB lB.
T{
\fBSized Internal Format\fR
T}:T{
\fBFormat\fR
T}:T{
\fBType\fR
T}:T{
\fBRed
.br
Bits\fR
T}:T{
\fBGreen
.br
Bits\fR
T}:T{
\fBBlue
.br
Bits\fR
T}:T{
\fBAlpha
.br
Bits\fR
T}:T{
\fBShared
.br
Bits\fR
T}:T{
\fBColor
.br
renderable\fR
T}:T{
\fBTexture 
.br
filterable\fR
T}
.T&
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l
l l l l l l l l l l.
T{
\fBGL_R8\fR
T}:T{
\fBGL_RED\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR
T}:T{
8
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
Y
T}
T{
\fBGL_R8_SNORM\fR
T}:T{
\fBGL_RED\fR
T}:T{
\fBGL_BYTE\fR
T}:T{
s8
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}
T{
\fBGL_R16F\fR
T}:T{
\fBGL_RED\fR
T}:T{
\fBGL_HALF_FLOAT\fR,\fBGL_FLOAT\fR
T}:T{
f16
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}
T{
\fBGL_R32F\fR
T}:T{
\fBGL_RED\fR
T}:T{
\fBGL_FLOAT\fR
T}:T{
f32
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}
T{
\fBGL_R8UI\fR
T}:T{
\fBGL_RED_INTEGER\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR
T}:T{
ui8
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_R8I\fR
T}:T{
\fBGL_RED_INTEGER\fR
T}:T{
\fBGL_BYTE\fR
T}:T{
i8
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_R16UI\fR
T}:T{
\fBGL_RED_INTEGER\fR
T}:T{
\fBGL_UNSIGNED_SHORT\fR
T}:T{
ui16
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_R16I\fR
T}:T{
\fBGL_RED_INTEGER\fR
T}:T{
\fBGL_SHORT\fR
T}:T{
i16
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_R32UI\fR
T}:T{
\fBGL_RED_INTEGER\fR
T}:T{
\fBGL_UNSIGNED_INT\fR
T}:T{
ui32
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_R32I\fR
T}:T{
\fBGL_RED_INTEGER\fR
T}:T{
\fBGL_INT\fR
T}:T{
i32
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_RG8\fR
T}:T{
\fBGL_RG\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR
T}:T{
8
T}:T{
8
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
Y
T}
T{
\fBGL_RG8_SNORM\fR
T}:T{
\fBGL_RG\fR
T}:T{
\fBGL_BYTE\fR
T}:T{
s8
T}:T{
s8
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}
T{
\fBGL_RG16F\fR
T}:T{
\fBGL_RG\fR
T}:T{
\fBGL_HALF_FLOAT\fR,\fBGL_FLOAT\fR
T}:T{
f16
T}:T{
f16
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}
T{
\fBGL_RG32F\fR
T}:T{
\fBGL_RG\fR
T}:T{
\fBGL_FLOAT\fR
T}:T{
f32
T}:T{
f32
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}
T{
\fBGL_RG8UI\fR
T}:T{
\fBGL_RG_INTEGER\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR
T}:T{
ui8
T}:T{
ui8
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_RG8I\fR
T}:T{
\fBGL_RG_INTEGER\fR
T}:T{
\fBGL_BYTE\fR
T}:T{
i8
T}:T{
i8
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_RG16UI\fR
T}:T{
\fBGL_RG_INTEGER\fR
T}:T{
\fBGL_UNSIGNED_SHORT\fR
T}:T{
ui16
T}:T{
ui16
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_RG16I\fR
T}:T{
\fBGL_RG_INTEGER\fR
T}:T{
\fBGL_SHORT\fR
T}:T{
i16
T}:T{
i16
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_RG32UI\fR
T}:T{
\fBGL_RG_INTEGER\fR
T}:T{
\fBGL_UNSIGNED_INT\fR
T}:T{
ui32
T}:T{
ui32
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_RG32I\fR
T}:T{
\fBGL_RG_INTEGER\fR
T}:T{
\fBGL_INT\fR
T}:T{
i32
T}:T{
i32
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_RGB8\fR
T}:T{
\fBGL_RGB\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR
T}:T{
8
T}:T{
8
T}:T{
8
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
Y
T}
T{
\fBGL_SRGB8\fR
T}:T{
\fBGL_RGB\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR
T}:T{
8
T}:T{
8
T}:T{
8
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}
T{
\fBGL_RGB565\fR
T}:T{
\fBGL_RGB\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR,
\fBGL_UNSIGNED_SHORT_5_6_5\fR
T}:T{
5
T}:T{
6
T}:T{
5
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}:T{
Y
T}
T{
\fBGL_RGB8_SNORM\fR
T}:T{
\fBGL_RGB\fR
T}:T{
\fBGL_BYTE\fR
T}:T{
s8
T}:T{
s8
T}:T{
s8
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}
T{
\fBGL_R11F_G11F_B10F\fR
T}:T{
\fBGL_RGB\fR
T}:T{
\fBGL_UNSIGNED_INT_10F_11F_11F_REV\fR,
\fBGL_HALF_FLOAT\fR,
\fBGL_FLOAT\fR
T}:T{
f11
T}:T{
f11
T}:T{
f10
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}
T{
\fBGL_RGB9_E5\fR
T}:T{
\fBGL_RGB\fR
T}:T{
\fBGL_UNSIGNED_INT_5_9_9_9_REV\fR,
\fBGL_HALF_FLOAT\fR,
\fBGL_FLOAT\fR
T}:T{
9
T}:T{
9
T}:T{
9
T}:T{
\ \&
T}:T{
5
T}:T{
\ \&
T}:T{
Y
T}
T{
\fBGL_RGB16F\fR
T}:T{
\fBGL_RGB\fR
T}:T{
\fBGL_HALF_FLOAT\fR,
\fBGL_FLOAT\fR
T}:T{
f16
T}:T{
f16
T}:T{
f16
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}
T{
\fBGL_RGB32F\fR
T}:T{
\fBGL_RGB\fR
T}:T{
\fBGL_FLOAT\fR
T}:T{
f32
T}:T{
f32
T}:T{
f32
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}
T{
\fBGL_RGB8UI\fR
T}:T{
\fBGL_RGB_INTEGER\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR
T}:T{
ui8
T}:T{
ui8
T}:T{
ui8
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}
T{
\fBGL_RGB8I\fR
T}:T{
\fBGL_RGB_INTEGER\fR
T}:T{
\fBGL_BYTE\fR
T}:T{
i8
T}:T{
i8
T}:T{
i8
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}
T{
\fBGL_RGB16UI\fR
T}:T{
\fBGL_RGB_INTEGER\fR
T}:T{
\fBGL_UNSIGNED_SHORT\fR
T}:T{
ui16
T}:T{
ui16
T}:T{
ui16
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}
T{
\fBGL_RGB16I\fR
T}:T{
\fBGL_RGB_INTEGER\fR
T}:T{
\fBGL_SHORT\fR
T}:T{
i16
T}:T{
i16
T}:T{
i16
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}
T{
\fBGL_RGB32UI\fR
T}:T{
\fBGL_RGB_INTEGER\fR
T}:T{
\fBGL_UNSIGNED_INT\fR
T}:T{
ui32
T}:T{
ui32
T}:T{
ui32
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}
T{
\fBGL_RGB32I\fR
T}:T{
\fBGL_RGB_INTEGER\fR
T}:T{
\fBGL_INT\fR
T}:T{
i32
T}:T{
i32
T}:T{
i32
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}
T{
\fBGL_RGBA8\fR
T}:T{
\fBGL_RGBA\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR
T}:T{
8
T}:T{
8
T}:T{
8
T}:T{
8
T}:T{
\ \&
T}:T{
Y
T}:T{
Y
T}
T{
\fBGL_SRGB8_ALPHA8\fR
T}:T{
\fBGL_RGBA\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR
T}:T{
8
T}:T{
8
T}:T{
8
T}:T{
8
T}:T{
\ \&
T}:T{
Y
T}:T{
Y
T}
T{
\fBGL_RGBA8_SNORM\fR
T}:T{
\fBGL_RGBA\fR
T}:T{
\fBGL_BYTE\fR
T}:T{
s8
T}:T{
s8
T}:T{
s8
T}:T{
s8
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}
T{
\fBGL_RGB5_A1\fR
T}:T{
\fBGL_RGBA\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR,
\fBGL_UNSIGNED_SHORT_5_5_5_1\fR,
\fBGL_UNSIGNED_INT_2_10_10_10_REV\fR
T}:T{
5
T}:T{
5
T}:T{
5
T}:T{
1
T}:T{
\ \&
T}:T{
Y
T}:T{
Y
T}
T{
\fBGL_RGBA4\fR
T}:T{
\fBGL_RGBA\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR,
\fBGL_UNSIGNED_SHORT_4_4_4_4\fR
T}:T{
4
T}:T{
4
T}:T{
4
T}:T{
4
T}:T{
\ \&
T}:T{
Y
T}:T{
Y
T}
T{
\fBGL_RGB10_A2\fR
T}:T{
\fBGL_RGBA\fR
T}:T{
\fBGL_UNSIGNED_INT_2_10_10_10_REV\fR
T}:T{
10
T}:T{
10
T}:T{
10
T}:T{
2
T}:T{
\ \&
T}:T{
Y
T}:T{
Y
T}
T{
\fBGL_RGBA16F\fR
T}:T{
\fBGL_RGBA\fR
T}:T{
\fBGL_HALF_FLOAT\fR,
\fBGL_FLOAT\fR
T}:T{
f16
T}:T{
f16
T}:T{
f16
T}:T{
f16
T}:T{
\ \&
T}:T{
\ \&
T}:T{
Y
T}
T{
\fBGL_RGBA32F\fR
T}:T{
\fBGL_RGBA\fR
T}:T{
\fBGL_FLOAT\fR
T}:T{
f32
T}:T{
f32
T}:T{
f32
T}:T{
f32
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}
T{
\fBGL_RGBA8UI\fR
T}:T{
\fBGL_RGBA_INTEGER\fR
T}:T{
\fBGL_UNSIGNED_BYTE\fR
T}:T{
ui8
T}:T{
ui8
T}:T{
ui8
T}:T{
ui8
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_RGBA8I\fR
T}:T{
\fBGL_RGBA_INTEGER\fR
T}:T{
\fBGL_BYTE\fR
T}:T{
i8
T}:T{
i8
T}:T{
i8
T}:T{
i8
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_RGB10_A2UI\fR
T}:T{
\fBGL_RGBA_INTEGER\fR
T}:T{
\fBGL_UNSIGNED_INT_2_10_10_10_REV\fR
T}:T{
ui10
T}:T{
ui10
T}:T{
ui10
T}:T{
ui2
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_RGBA16UI\fR
T}:T{
\fBGL_RGBA_INTEGER\fR
T}:T{
\fBGL_UNSIGNED_SHORT\fR
T}:T{
ui16
T}:T{
ui16
T}:T{
ui16
T}:T{
ui16
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_RGBA16I\fR
T}:T{
\fBGL_RGBA_INTEGER\fR
T}:T{
\fBGL_SHORT\fR
T}:T{
i16
T}:T{
i16
T}:T{
i16
T}:T{
i16
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_RGBA32I\fR
T}:T{
\fBGL_RGBA_INTEGER\fR
T}:T{
\fBGL_INT\fR
T}:T{
i32
T}:T{
i32
T}:T{
i32
T}:T{
i32
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
T{
\fBGL_RGBA32UI\fR
T}:T{
\fBGL_RGBA_INTEGER\fR
T}:T{
\fBGL_UNSIGNED_INT\fR
T}:T{
ui32
T}:T{
ui32
T}:T{
ui32
T}:T{
ui32
T}:T{
\ \&
T}:T{
Y
T}:T{
\ \&
T}
.TE
.sp 1
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.B Table\ \&1.\ \&Sized Internal Formats
.TS
allbox tab(:);
lB lB lB lB lB.
T{
\fBSized Internal Format\fR
T}:T{
\fBFormat\fR
T}:T{
\fBType\fR
T}:T{
\fBDepth Bits\fR
T}:T{
\fBStencil Bits\fR
T}
.T&
l l l l l
l l l l l
l l l l l
l l l l l
l l l l l.
T{
\fBGL_DEPTH_COMPONENT16\fR
T}:T{
\fBGL_DEPTH_COMPONENT\fR
T}:T{
\fBGL_UNSIGNED_SHORT\fR,
\fBGL_UNSIGNED_INT\fR
T}:T{
16
T}:T{
\ \&
T}
T{
\fBGL_DEPTH_COMPONENT24\fR
T}:T{
\fBGL_DEPTH_COMPONENT\fR
T}:T{
\fBGL_UNSIGNED_INT\fR
T}:T{
24
T}:T{
\ \&
T}
T{
\fBGL_DEPTH_COMPONENT32F\fR
T}:T{
\fBGL_DEPTH_COMPONENT\fR
T}:T{
\fBGL_FLOAT\fR
T}:T{
f32
T}:T{
\ \&
T}
T{
\fBGL_DEPTH24_STENCIL8\fR
T}:T{
\fBGL_DEPTH_STENCIL\fR
T}:T{
\fBGL_UNSIGNED_INT_24_8\fR
T}:T{
24
T}:T{
8
T}
T{
\fBGL_DEPTH32F_STENCIL8\fR
T}:T{
\fBGL_DEPTH_STENCIL\fR
T}:T{
\fBGL_FLOAT_32_UNSIGNED_INT_24_8_REV\fR
T}:T{
f32
T}:T{
8
T}
.TE
.sp 1
.PP
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.B Table\ \&2.\ \&Compressed Internal Formats
.TS
allbox tab(:);
lB lB lB.
T{
\fBCompressed Internal Format\fR
T}:T{
\fBBase Internal Format\fR
T}:T{
\fBImage Size\fR
T}
.T&
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l.
T{
\fBGL_COMPRESSED_R11_EAC\fR
T}:T{
\fBGL_RED\fR
T}:T{
ceil(\fIwidth\fR/4) * ceil(\fIheight\fR/4) * 8
T}
T{
\fBGL_COMPRESSED_SIGNED_R11_EAC\fR
T}:T{
\fBGL_RED\fR
T}:T{
ceil(\fIwidth\fR/4) * ceil(\fIheight\fR/4) * 8
T}
T{
\fBGL_COMPRESSED_RG11_EAC\fR
T}:T{
\fBGL_RG\fR
T}:T{
ceil(\fIwidth\fR/4) * ceil(\fIheight\fR/4) * 16
T}
T{
\fBGL_COMPRESSED_SIGNED_RG11_EAC\fR
T}:T{
\fBGL_RG\fR
T}:T{
ceil(\fIwidth\fR/4) * ceil(\fIheight\fR/4) * 16
T}
T{
\fBGL_COMPRESSED_RGB8_ETC2\fR
T}:T{
\fBGL_RGB\fR
T}:T{
ceil(\fIwidth\fR/4) * ceil(\fIheight\fR/4) * 8
T}
T{
\fBGL_COMPRESSED_SRGB8_ETC2\fR
T}:T{
\fBGL_RGB\fR
T}:T{
ceil(\fIwidth\fR/4) * ceil(\fIheight\fR/4) * 8
T}
T{
\fBGL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2\fR
T}:T{
\fBGL_RGBA\fR
T}:T{
ceil(\fIwidth\fR/4) * ceil(\fIheight\fR/4) * 8
T}
T{
\fBGL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2\fR
T}:T{
\fBGL_RGBA\fR
T}:T{
ceil(\fIwidth\fR/4) * ceil(\fIheight\fR/4) * 8
T}
T{
\fBGL_COMPRESSED_RGBA8_ETC2_EAC\fR
T}:T{
\fBGL_RGBA\fR
T}:T{
ceil(\fIwidth\fR/4) * ceil(\fIheight\fR/4) * 16
T}
T{
\fBGL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC\fR
T}:T{
\fBGL_RGBA\fR
T}:T{
ceil(\fIwidth\fR/4) * ceil(\fIheight\fR/4) * 16
T}
.TE
.sp 1
.SH "ERRORS"
.PP
\fBGL_INVALID_OPERATION\fR
is generated if the default texture object is curently bound to
\fItarget\fR\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if the texture object curently bound to
\fItarget\fR
already has
\fBGL_TEXTURE_IMMUTABLE_FORMAT\fR
set to
\fBGL_TRUE\fR\&.
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fIinternalformat\fR
is not a valid sized internal format\&.
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fItarget\fR
is not one of the accepted target enumerants\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIwidth\fR,
\fIheight\fR
or
\fIlevels\fR
are less than 1\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fIlevels\fR
is greater than
log 2 max width , \ \& height + 1\&.
.SH "API VERSION SUPPORT"
.TS
allbox tab(:);
lB cB s
lB cB cB.
T{

T}:T{
\fBOpenGL ES API Version\fR
T}
T{
\fBFunction Name\fR
T}:T{
\fB2\&.0\fR
T}:T{
\fB3\&.0\fR
T}
.T&
l c c.
T{
glTexStorage2D
T}:T{
\-
T}:T{
✔
T}
.TE
.sp 1
.SH "SEE ALSO"
.PP
\fBglTexImage2D\fR(),
\fBglCompressedTexImage2D\fR(),
\fBglTexStorage3D\fR()\&.
.SH "COPYRIGHT"
.PP
Copyright
\(co
2011\-2014 Khronos Group\&. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1\&.0, 8 June 1999\&.
\m[blue]\fBhttp://opencontent\&.org/openpub/\fR\m[]\&.
.SH "COPYRIGHT"
.br
Copyright \(co 2011-2014 Khronos Group
.br
