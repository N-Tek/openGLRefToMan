'\" t
.\"     Title: glBlendEquation
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 12/21/2021
.\"    Manual: { OpenGL ES 3.2 }
.\"    Source: pkged by Necib CAPAR(PhD.)
.\"  Language: English
.\"
.TH "GLBLENDEQUATION" "3GLesLatest" "12/21/2021" "pkged by Necib CAPAR(PhD\&.)" "{ OpenGL ES 3\&.2 }"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glBlendEquation \- specify the equation used for both the RGB blend equation and the Alpha blend equation
.SH "C SPECIFICATION"
.HP \w'void\ glBlendEquation('u
.BI "void glBlendEquation(GLenum\ " "mode" ");"
.HP \w'void\ glBlendEquationi('u
.BI "void glBlendEquationi(GLuint\ " "buf" ", GLenum\ " "mode" ");"
.SH "PARAMETERS"
.PP
\fIbuf\fR
.RS 4
for
\fBglBlendEquationi\fR, specifies the index of the draw buffer for which to set the blend equation\&.
.RE
.PP
\fImode\fR
.RS 4
specifies how source and destination colors are combined\&. It must be
\fBGL_FUNC_ADD\fR,
\fBGL_FUNC_SUBTRACT\fR,
\fBGL_FUNC_REVERSE_SUBTRACT\fR,
\fBGL_MIN\fR,
\fBGL_MAX\fR\&.
.RE
.SH "DESCRIPTION"
.PP
The blend equations determine how a new pixel (the \*(Aq\*(Aqsource\*(Aq\*(Aq color) is combined with a pixel already in the framebuffer (the \*(Aq\*(Aqdestination\*(Aq\*(Aq color)\&. This function sets both the RGB blend equation and the alpha blend equation to a single equation\&.
\fBglBlendEquationi\fR
specifies the blend equation for a single draw buffer whereas
\fBglBlendEquation\fR
sets the blend equation for all draw buffers\&.
.PP
Some of these equations use the source and destination blend factors specified by either
\fBglBlendFunc\fR()
or
\fBglBlendFuncSeparate\fR()\&. See
\fBglBlendFunc\fR()
or
\fBglBlendFuncSeparate\fR()
for a description of the various blend factors\&.
.PP
In the equations that follow, source and destination color components are referred to as
(Rs, Gs, Bs, As)
and
(Rd, Gd, Bd, Ad), respectively\&.
.PP
The result color is referred to as
(Rr, Gr, Br, Ar)\&. The source and destination blend factors are denoted
(sR, sG, sB, sA)
and
(dR, dG, dB, dA), respectively\&. For these equations all color components are understood to have values in the range
[0, 1]\&.
.TS
allbox tab(:);
lB lB lB.
T{
\fB Mode \fR
T}:T{
\fB RGB Components \fR
T}:T{
\fB Alpha Component \fR
T}
.T&
l l l
l l l
l l l
l l l
l l l.
T{
\fBGL_FUNC_ADD\fR
T}:T{
.br
Rr = Rs sR + Rd dR
.br
Gr = Gs sG + Gd dG
.br
Br = Bs sB + Bd dB
.br
T}:T{

.br
Ar = As sA + Ad dA
.br
T}
T{
\fBGL_FUNC_SUBTRACT\fR
T}:T{
.br
Rr = Rs sR \- Rd dR
.br
Gr = Gs sG \- Gd dG
.br
Br = Bs sB \- Bd dB
.br
T}:T{

.br
Ar = As Sa \- Ad dA
T}
T{
\fBGL_FUNC_REVERSE_SUBTRACT\fR
T}:T{
.br
Rr = Rd dR \- Rs sR
.br
Gr = Gd dG \- Gs sG
.br
Br = Bd dB \- Bs sB
.br
T}:T{

.br
Ar = Ad dA - As sA
T}
T{
\fBGL_MIN\fR
T}:T{
Rr = min(Rs, Rd)
.br
Gr = min(Gs, Gd)
.br
Br = min(Bs, Bd)
T}:T{

.br
Ar = min(As, Ad)
T}
T{
\fBGL_MAX\fR
T}:T{
Rr = max(Rs, Rd)
.br
Gr = max(Gs, Gd)
.br
Br = max(Bs, Bd)
T}:T{

.br
Ar = max(As, Ad)
T}
.TE
.sp 1
.PP For the advanced blending equations, the source and destination color components are premultiplied by the alpha component prior to blending\&. 
The base source and destination colours are referred to as (R\*(Aqs, G\*(Aqs, B\*(Aqs) and (R\*(Aqd, G\*(Aqd\*(Aq, B\*(Aqd\*(Aq), respectively, 
and are calculated as follows: 
.br
(R\*(Aqsi G\*(Aqs, B\*(Aqs) = (0, 0, 0), if A s == 0, otherwise 

.br
                        Rs   Gs  Bs 
.br
    (R\*(Aqs, G\*(Aqs, B\*(Aqs) = ( --,  --, -- )\&. 
.br
                        As   As  As
.PP 
All of the advanced blending equations perform the following equations:
.PP
.RS 4
R = f(R\*(Aqs, R\*(Aqd) * p0(As, Ad) + R\*(Aqs) * p1(As, Ad) + R\*(Aqd) * p2(As, Ad)
.RE
.PP
.RS 4
G = f(G\*(Aqs, G\*(Aqd) * p0(As, Ad) + G\*(Aqs) * p1(As, Ad) + G\*(Aqd) * p2(As, Ad)
.RE
.PP
.RS 4
B = f(B\*(Aqs, B\*(Aqd) * p0(As, Ad) + B\*(Aqs) * p1(As, Ad) + B\*(Aqd) * p2(As, Ad)
.RE
.PP
.RS 4
A = p0(As, Ad) + p1(As, Ad) + p2(As, Ad)
.RE
.PP 
Where the weighting functions p0, p1, and p2 are defined as follows:
.PP
.RS 4
p0(As, Ad) = As * Ad
.RE
.PP
.RS 4
p1(As, Ad) = As * (1 - Ad)
.RE
.PP
.RS 4
p2(As, Ad) = As * (1 - As)
.RE
.TS
allbox tab(:);
lB lB lB.
T{
\fB Advanced Mode \fR
T}:T{
\fB Blend Coefficients: \fR
f(Cs, Cd)
T}:T{
\fB Conditions \fR
T}
.T&
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l.
T{
\fBGL_MULTIPLY\fR
T}:T{
Cs * Cd
T}:T{
\fBn/a\fR
T}
T{
\fBGL_SCREEN\fR
T}:T{
Cs + Cd \- Cs * Cd
T}:T{
\fBn/a\fR
T}
T{
\fBGL_OVERLAY\fR
T}:T{
2 * Cs * Cd
.br
1 \- 2 * (1 \- Cs) * (1 - Cd)
T}:T{
Cd <= 0.5
.br
otherwise
T}
T{
\fBGL_DARKEN\fR
T}:T{
min(Cs, Cd)
T}:T{
\fBn/a\fR
T}
T{
\fBGL_LIGHTEN\fR
T}:T{
max(Cs, Cd)
T}:T{
\fBn/a\fR
T}
T{
\fBGL_COLORDODGE\fR
T}:T{
0
.br
min(1, Cd / (1 \- Cs))
.br
1
T}:T{
Cd <= 0
.br
Cd > 0 and Cs < 1
.br
Cd > 0 and Cs >= 1
T}
T{
\fBGL_COLORBURN\fR
T}:T{
1
.br
1 \- min(1, (1 \- Cd) / Cs)
.br
0
T}:T{
Cd >= 1
.br
Cd < 1 and Cs > 0
.br
Cd < 1 and Cs <= 0
T}
T{
\fBGL_HARDLIGHT\fR
T}:T{
2 * Cs * Cd
.br
1 \- 2 * (1 \- Cs) * (1 \- Cd)
T}:T{
Cs <= 0\&.5
.br
otherwise
T}
T{
\fBGL_SOFTLIGHT\fR
T}:T{
Cd \- (1 \- 2 * Cs) * Cd * (1 \- C d)
.br
Cd + (2 * Cs \- 1) * Cd * ((16 * Cd \- 12) * Cd + 3)
.br
Cd + (2 * Cs \- 1) * (sqrt(Cd) \- Cd)
T}:T{
Cs <= 0\&.5
.br
Cs > 0\&.5 and Cd <= 0\&.25

.br
Cs > 0\&.5 and Cd > 0\&.25
T}
T{
\fBGL_DIFFERENCE\fR
T}:T{
abs(Cd \- Cs)
T}:T{
\fBn/a\fR
T}
T{
\fBGL_EXCLUSION\fR
T}:T{
Cs + Cd \- 2 * Cs * Cd
T}:T{
\fBn/a\fR
T}
.TE
.sp 1
.PP
For the HSL modes, the following functions are defined:
.PP
.RS 4
    float minv3(vec3 c) { 
.br
        return min(min(c\&.r, c\&.g), c\&.b); 
    }
.RE
.PP
.RS 4
    float maxv3(vec3 c) { 
.br
        return max(max(c\&.r, c\&.g), c\&.b); 
    }
.RE
.PP
.RS 4
    float lumv3(vec3 c) { 
.br
        return dot(c, vec3(0\&.30, 0\&.59, 0\&.11)); 
    }
.RE
.PP
.RS 4
    float satv3(vec3 c) { 
.br
        return maxv3(c) \- minv3(c); 
    }
.RE
.PP
.RS 4
    vec3 SetLum(vec3 cbase, vec3 clum) { 
        float lbase = lumv3(cbase);
.br
        float llum = lumv3(clum);
.br
        float ldiff = llum \- lbase;
.br
        vec3 color = cbase + vec3(ldiff);
.sp
        if (minv3(color) < 0\&.0) {
.br
            return llum + ((color\-llum)*llum) / (llum\-minv3(color));  
        } else if (maxv3(color) > 1\&.0) {
.br
            return llum + ((color\-llum)*(1\-llum)) / (maxv3(color)\-llum);
        } else {
.br
            return color;
.br
        }
    }
.RE
.PP
.RS 4
    vec3 SetLumSat(vec3 cbase, vec3 csat, vec3 clum) {
        float minbase = minv3(cbase);
.br
        float sbase = satv3(cbase);
.br
        float ssat = satv3(csat);
.br
        vec3 color;
.sp
        if (sbase > 0) {
.br
            color = (cbase \- minbase) * ssat / sbase;  
        } else {
.br
            color = vec3(0\&.0);
        }
.br
        return SetLum(color, clum);
    }
.RE
.TS
allbox tab(:);
lB lB.
T{
\fB HSL Mode \fR
T}:T{
\fB Blend Coefficients: \fR
f(Cs, Cd)
T}
.T&
l l
l l
l l
l l.
T{
\fBGL_HSL_HUE\fR
T}:T{
SetLumSat(Cs, Cd, Cd)
T}
T{
\fBGL_HSL_SATURATION\fR
T}:T{
SetLumSat(Cd, Cs, Cd)
T}
T{
\fBGL_HSL_COLOR\fR
T}:T{
SetLum(Cs, Cd)
T}
T{
\fBGL_HSL_LUMINOSITY\fR
T}:T{
SetLum(Cd, Cs)
T}
.TE
.sp 1
.PP
The results of all these equations are clamped to the range
[0, 1]\&.
.PP
The
\fBGL_MIN\fR
and
\fBGL_MAX\fR
equations are useful for applications that analyze image data (image thresholding against a constant color, for example)\&. The
\fBGL_FUNC_ADD\fR
equation is useful for antialiasing and transparency, among other things\&.
.PP
Initially, both the RGB blend equation and the alpha blend equation are set to
\fBGL_FUNC_ADD\fR\&.
.PP
.SH "NOTES"
.PP
Only the
\fBGL_FUNC_ADD\fR,
\fBGL_FUNC_SUBTRACT\fR, and
\fBGL_FUNC_REVERSE_SUBTRACT\fR
equations use the source or destination factors, while the other equations use only the source and destination colors\&.
.PP
Advanced blending equations are supported only when rendering to a single color buffer using fragment color zero\&. If any non\-NONE draw buffer uses an advanced blend equation the error INVALID_OPERATION is generated by
\fBglDrawArrays\fR
or any other drawing command\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fImode\fR
is not one of
\fBGL_FUNC_ADD\fR,
\fBGL_FUNC_SUBTRACT\fR,
\fBGL_FUNC_REVERSE_SUBTRACT\fR,
\fBGL_MAX\fR, or
\fBGL_MIN\fR\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated by
\fBglBlendEquationi\fR
if
\fIbuf\fR
is greater than or equal to the value of
\fBGL_MAX_DRAW_BUFFERS\fR\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with an argument of
\fBGL_BLEND_EQUATION_RGB\fR
.PP
\fBglGet\fR()
with an argument of
\fBGL_BLEND_EQUATION_ALPHA\fR
.SH "API VERSION SUPPORT"
.TS
allbox tab(:);
lB cB s s s
lB cB cB cB cB.
T{

T}:T{
\fBOpenGL ES API Version\fR
T}
T{
\fBFunction Name\fR
T}:T{
\fB2\&.0\fR
T}:T{
\fB3\&.0\fR
T}:T{
\fB3\&.1\fR
T}:T{
\fB3\&.2\fR
T}
.T&
l c c c c
l c c c c.
T{
glBlendEquation
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}
T{
glBlendEquationi
T}:T{
\-
T}:T{
\-
T}:T{
\-
T}:T{
✔
T}
.TE
.sp 1
.SH "SEE ALSO"
.PP
\fBglBlendColor\fR(),
\fBglBlendEquationSeparate\fR(),
\fBglBlendFunc\fR(),
\fBglBlendFuncSeparate\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. Copyright
\(co
2010\-2015 Khronos Group\&. This document is licensed under the SGI Free Software B License\&. For details, see
\m[blue]\fBhttps://khronos\&.org/registry/OpenGL\-Refpages/LICENSES/LicenseRef\-FreeB\&.txt\fR\m[]\&.
.SH "COPYRIGHT"
.br
Copyright \(co 1991-2006 Silicon Graphics, Inc.
.br
Copyright \(co 2010-2015 Khronos Group
.br
