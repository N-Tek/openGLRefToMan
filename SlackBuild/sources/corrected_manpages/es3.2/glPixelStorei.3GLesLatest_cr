'\" t
.\"     Title: glPixelStorei
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 12/21/2021
.\"    Manual: { OpenGL ES 3.2 }
.\"    Source: pkged by Necib CAPAR(PhD.)
.\"  Language: English
.\"
.TH "GLPIXELSTOREI" "3GLesLatest" "12/21/2021" "pkged by Necib CAPAR(PhD\&.)" "{ OpenGL ES 3\&.2 }"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glPixelStorei \- set pixel storage modes
.SH "C SPECIFICATION"
.HP \w'void\ glPixelStorei('u
.BI "void glPixelStorei(GLenum\ " "pname" ", GLint\ " "param" ");"
.SH "PARAMETERS"
.PP
\fIpname\fR
.RS 4
Specifies the symbolic name of the parameter to be set\&. Four values affect the packing of pixel data into memory:
\fBGL_PACK_ROW_LENGTH\fR,
\fBGL_PACK_SKIP_PIXELS\fR,
\fBGL_PACK_SKIP_ROWS\fR, and
\fBGL_PACK_ALIGNMENT\fR\&. Six more affect the unpacking of pixel data
\fIfrom\fR
memory:
\fBGL_UNPACK_ROW_LENGTH\fR,
\fBGL_UNPACK_IMAGE_HEIGHT\fR,
\fBGL_UNPACK_SKIP_PIXELS\fR,
\fBGL_UNPACK_SKIP_ROWS\fR,
\fBGL_UNPACK_SKIP_IMAGES\fR, and
\fBGL_UNPACK_ALIGNMENT\fR\&.
.RE
.PP
\fIparam\fR
.RS 4
Specifies the value that
\fIpname\fR
is set to\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglPixelStorei\fR
sets pixel storage modes that affect the operation of subsequent
\fBglReadPixels\fR()
as well as the unpacking of texture patterns (see
\fBglTexImage2D\fR(),
\fBglTexImage3D\fR(),
\fBglTexSubImage2D\fR(),
\fBglTexSubImage3D\fR())\&.
.PP
\fIpname\fR
is a symbolic constant indicating the parameter to be set, and
\fIparam\fR
is the new value\&. Four of the ten storage parameters affect how pixel data is returned to client memory\&. They are as follows:
.PP
\fBGL_PACK_ROW_LENGTH\fR
.RS 4
If greater than 0,
\fBGL_PACK_ROW_LENGTH\fR
defines the number of pixels in a row\&. If the first pixel of a row is placed at location
p
in memory, then the location of the first pixel of the next row is obtained by skipping
.sp
         { n l                   s >= a
         {
     k = {  a      ( s n l )
         {  -  ceil( ----- )     s <  a
         {  s      (   a   )
.sp
components or indices, where
n
is the number of components or indices in a pixel,
l
is the number of pixels in a row (\fBGL_PACK_ROW_LENGTH\fR
if it is greater than 0, the
width
argument to the pixel routine otherwise),
a
is the value of
\fBGL_PACK_ALIGNMENT\fR, and
s
is the size, in bytes, of a single component (if
a < s, then it is as if
a = s)\&. In the case of 1\-bit values, the location of the next row is obtained by skipping
.sp
                 ( n l )
.br
     k = 8 a ceil( --- )
.br
                 ( 8 a )
.sp
components or indices\&.
.sp
The word
\fIcomponent\fR
in this description refers to the nonindex values red, green, blue, alpha, and depth\&. Storage format
\fBGL_RGB\fR, for example, has three components per pixel: first red, then green, and finally blue\&.
.RE
.PP
\fBGL_PACK_SKIP_PIXELS\fR and \fBGL_PACK_SKIP_ROWS\fR
.RS 4
These values are provided as a convenience to the programmer; they provide no functionality that cannot be duplicated simply by incrementing the pointer passed to
\fBglReadPixels\fR()\&. Setting
\fBGL_PACK_SKIP_PIXELS\fR
to
i
is equivalent to incrementing the pointer by
i ⁢ n
components or indices, where
n
is the number of components or indices in each pixel\&. Setting
\fBGL_PACK_SKIP_ROWS\fR
to
j
is equivalent to incrementing the pointer by
j ⁢ m
components or indices, where
m
is the number of components or indices per row, as just computed in the
\fBGL_PACK_ROW_LENGTH\fR
section\&.
.RE
.PP
\fBGL_PACK_ALIGNMENT\fR
.RS 4
Specifies the alignment requirements for the start of each pixel row in memory\&. The allowable values are 1 (byte\-alignment), 2 (rows aligned to even\-numbered bytes), 4 (word\-alignment), and 8 (rows start on double\-word boundaries)\&.
.RE
.PP
The other six of the ten storage parameters affect how pixel data is read from client memory\&. These values are significant for
\fBglTexImage2D\fR(),
\fBglTexImage3D\fR(),
\fBglTexSubImage2D\fR(), and
\fBglTexSubImage3D\fR()
.PP
They are as follows:
.PP
\fBGL_UNPACK_ROW_LENGTH\fR
.RS 4
If greater than 0,
\fBGL_UNPACK_ROW_LENGTH\fR
defines the number of pixels in a row\&. If the first pixel of a row is placed at location
p
in memory, then the location of the first pixel of the next row is obtained by skipping
.sp
         { n l                   s >= a
         {
     k = {  a      ( s n l )
         {  -  ceil( ----- )     s <  a
         {  s      (   a   )
.sp
components or indices, where
n
is the number of components or indices in a pixel,
l
is the number of pixels in a row (\fBGL_UNPACK_ROW_LENGTH\fR
if it is greater than 0, the
width
argument to the pixel routine otherwise),
a
is the value of
\fBGL_UNPACK_ALIGNMENT\fR, and
s
is the size, in bytes, of a single component (if
a < s, then it is as if
a = s)\&. In the case of 1\-bit values, the location of the next row is obtained by skipping
.sp
                 ( n l )
.br
     k = 8 a ceil( --- )
.br
                 ( 8 a )
.sp
components or indices\&.
.sp
The word
\fIcomponent\fR
in this description refers to the nonindex values red, green, blue, alpha, and depth\&. Storage format
\fBGL_RGB\fR, for example, has three components per pixel: first red, then green, and finally blue\&.
.RE
.PP
\fBGL_UNPACK_IMAGE_HEIGHT\fR
.RS 4
If greater than 0,
\fBGL_UNPACK_IMAGE_HEIGHT\fR
defines the number of pixels in an image of a three\-dimensional texture volume\&. Where ``image\*(Aq\*(Aq is defined by all pixel sharing the same third dimension index\&. If the first pixel of a row is placed at location
p
in memory, then the location of the first pixel of the next row is obtained by skipping
.sp
         { n l h                   s >= a
         {
     k = {  a      ( s n l h )
         {  -  ceil( ------- )     s <  a
         {  s      (    a    )
.sp
components or indices, where
n
is the number of components or indices in a pixel,
l
is the number of pixels in a row (\fBGL_UNPACK_ROW_LENGTH\fR
if it is greater than 0, the
width
argument to
\fBglTexImage3D\fR()
otherwise),
h
is the number of rows in an image (\fBGL_UNPACK_IMAGE_HEIGHT\fR
if it is greater than 0, the
height
argument to
\fBglTexImage3D\fR()
otherwise),
a
is the value of
\fBGL_UNPACK_ALIGNMENT\fR, and
s
is the size, in bytes, of a single component (if
a < s, then it is as if
a = s)\&.
.sp
The word
\fIcomponent\fR
in this description refers to the nonindex values red, green, blue, alpha, and depth\&. Storage format
\fBGL_RGB\fR, for example, has three components per pixel: first red, then green, and finally blue\&.
.RE
.PP
\fBGL_UNPACK_SKIP_PIXELS\fR, \fBGL_UNPACK_SKIP_ROWS\fR and \fBGL_UNPACK_SKIP_IMAGES\fR
.RS 4
These values are provided as a convenience to the programmer; they provide no functionality that cannot be duplicated by incrementing the pointer passed to
\fBglTexImage2D\fR()
or
\fBglTexSubImage2D\fR()\&. Setting
\fBGL_UNPACK_SKIP_PIXELS\fR
to
i
is equivalent to incrementing the pointer by
i ⁢ n
components or indices, where
n
is the number of components or indices in each pixel\&. Setting
\fBGL_UNPACK_SKIP_ROWS\fR
to
j
is equivalent to incrementing the pointer by
j ⁢ k
components or indices, where
k
is the number of components or indices per row, as just computed in the
\fBGL_UNPACK_ROW_LENGTH\fR
section\&. Setting
\fBGL_UNPACK_SKIP_IMAGES\fR
to
k
is equivalent to incrementing the pointer by
k ⁢ p, where
p
is the number of components or indices per image, as computed in the
\fBGL_UNPACK_IMAGE_HEIGHT\fR
section\&.
.RE
.PP
\fBGL_UNPACK_ALIGNMENT\fR
.RS 4
Specifies the alignment requirements for the start of each pixel row in memory\&. The allowable values are 1 (byte\-alignment), 2 (rows aligned to even\-numbered bytes), 4 (word\-alignment), and 8 (rows start on double\-word boundaries)\&.
.RE
.PP
The following table gives the type, initial value, and range of valid values for each storage parameter that can be set with
\fBglPixelStorei\fR\&.
.PP
.TS
allbox tab(:);
lB cB cB cB l.
T{
\fB \fR\fB\fIpname\fR\fR\fB \fR
T}:T{
\fB Type \fR
T}:T{
\fB Initial Value \fR
T}:T{
\fB Valid Range \fR
T}:T{
\ \&
T}
.T&
l c c c l
l c c c l
l c c c l
l c c c l
l c c c l
l c c c l
l c c c l
l c c c l
l c c c l
l c c c l.
T{
\fBGL_PACK_ROW_LENGTH\fR
T}:T{
integer
T}:T{
0
T}:T{
0
T}:T{
\ \&
T}
T{
\fBGL_PACK_SKIP_ROWS\fR
T}:T{
integer
T}:T{
0
T}:T{
0
T}:T{
\ \&
T}
T{
\fBGL_PACK_SKIP_PIXELS\fR
T}:T{
integer
T}:T{
0
T}:T{
0
T}:T{
\ \&
T}
T{
\fBGL_PACK_ALIGNMENT\fR
T}:T{
integer
T}:T{
4
T}:T{
1, 2, 4, or 8
T}:T{
\ \&
T}
T{
\fBGL_UNPACK_ROW_LENGTH\fR
T}:T{
integer
T}:T{
0
T}:T{
0
T}:T{
\ \&
T}
T{
\fBGL_UNPACK_IMAGE_HEIGHT\fR
T}:T{
integer
T}:T{
0
T}:T{
0
T}:T{
\ \&
T}
T{
\fBGL_UNPACK_SKIP_ROWS\fR
T}:T{
integer
T}:T{
0
T}:T{
0
T}:T{
\ \&
T}
T{
\fBGL_UNPACK_SKIP_PIXELS\fR
T}:T{
integer
T}:T{
0
T}:T{
0
T}:T{
\ \&
T}
T{
\fBGL_UNPACK_SKIP_IMAGES\fR
T}:T{
integer
T}:T{
0
T}:T{
0
T}:T{
\ \&
T}
T{
\fBGL_UNPACK_ALIGNMENT\fR
T}:T{
integer
T}:T{
4
T}:T{
1, 2, 4, or 8
T}:T{
\ \&
T}
.TE
.sp 1
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fIpname\fR
is not an accepted value\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if a negative row length, pixel skip, or row skip value is specified, or if alignment is specified as other than 1, 2, 4, or 8\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with argument
\fBGL_PACK_ROW_LENGTH\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PACK_SKIP_ROWS\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PACK_SKIP_PIXELS\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PACK_ALIGNMENT\fR
.PP
\fBglGet\fR()
with argument
\fBGL_UNPACK_ROW_LENGTH\fR
.PP
\fBglGet\fR()
with argument
\fBGL_UNPACK_IMAGE_HEIGHT\fR
.PP
\fBglGet\fR()
with argument
\fBGL_UNPACK_SKIP_ROWS\fR
.PP
\fBglGet\fR()
with argument
\fBGL_UNPACK_SKIP_PIXELS\fR
.PP
\fBglGet\fR()
with argument
\fBGL_UNPACK_SKIP_IMAGES\fR
.PP
\fBglGet\fR()
with argument
\fBGL_UNPACK_ALIGNMENT\fR
.SH "API VERSION SUPPORT"
.TS
allbox tab(:);
lB cB s s s
lB cB cB cB cB.
T{

T}:T{
\fBOpenGL ES API Version\fR
T}
T{
\fBFunction Name\fR
T}:T{
\fB2\&.0\fR
T}:T{
\fB3\&.0\fR
T}:T{
\fB3\&.1\fR
T}:T{
\fB3\&.2\fR
T}
.T&
l c c c c.
T{
glPixelStorei
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}
.TE
.sp 1
.SH "SEE ALSO"
.PP
\fBglReadPixels\fR(),
\fBglTexImage2D\fR(),
\fBglTexImage3D\fR(),
\fBglTexSubImage2D\fR(),
\fBglTexSubImage3D\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. Copyright
\(co
2010\-2020 Khronos Group\&. This document is licensed under the SGI Free Software B License\&. For details, see
\m[blue]\fBhttps://khronos\&.org/registry/OpenGL\-Refpages/LICENSES/LicenseRef\-FreeB\&.txt\fR\m[]\&.
.SH "COPYRIGHT"
.br
Copyright \(co 1991-2006 Silicon Graphics, Inc.
.br
Copyright \(co 2010-2016 Khronos Group
.br
