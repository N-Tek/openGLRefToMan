'\" t
.\"     Title: glRotate
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 12/21/2021
.\"    Manual: { OpenGL 2.1 }
.\"    Source: pkged by Necib CAPAR(PhD.)
.\"  Language: English
.\"
.TH "GLROTATE" "3GLearliest" "12/21/2021" "pkged by Necib CAPAR(PhD\&.)" "{ OpenGL 2\&.1 }"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glRotate \- multiply the current matrix by a rotation matrix
.SH "C SPECIFICATION"
.HP \w'void\ glRotated('u
.BI "void glRotated(GLdouble\ " "angle" ", GLdouble\ " "x" ", GLdouble\ " "y" ", GLdouble\ " "z" ");"
.HP \w'void\ glRotatef('u
.BI "void glRotatef(GLfloat\ " "angle" ", GLfloat\ " "x" ", GLfloat\ " "y" ", GLfloat\ " "z" ");"
.SH "PARAMETERS"
.PP
\fIangle\fR
.RS 4
Specifies the angle of rotation, in degrees\&.
.RE
.PP
\fIx\fR, \fIy\fR, \fIz\fR
.RS 4
Specify the
\fIx\fR,
\fIy\fR, and
\fIz\fR
coordinates of a vector, respectively\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglRotate\fR
produces a rotation of
\fIangle\fR
degrees around the vector
x y z\&. The current matrix (see
\fBglMatrixMode\fR()) is multiplied by a rotation matrix with the product replacing the current matrix, as if
\fBglMultMatrix\fR()
were called with the following matrix as its argument:
.PP

			  ( x^2 (1\-c) + c      xy  (1\-c) + zs      xz (1\-c) \- ys     0 )
.br
			  ( yx  (1\-c) \- zs     y^2 (1\-c) + c       yz (1\-c) + xs     0 )
.br
			  ( xz  (1\-c) + ys     yz  (1\-c) \- xs      z2 (1\-c) + c      0 )
.br
			  (       0                  0                  0            1 )
.br
.PP
.PP
Where
c = cos(angle),
s = sin(angle), and
||x, y, z|| = 1
(if not, the GL will normalize this vector)\&.
.PP
.PP
.PP
If the matrix mode is either
\fBGL_MODELVIEW\fR
or
\fBGL_PROJECTION\fR, all objects drawn after
\fBglRotate\fR
is called are rotated\&. Use
\fBglPushMatrix\fR()
and
\fBglPopMatrix\fR()
to save and restore the unrotated coordinate system\&.
.SH "NOTES"
.PP
This rotation follows the right\-hand rule, so if the vector
x y z
points toward the user, the rotation will be counterclockwise\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fBglRotate\fR
is executed between the execution of
\fBglBegin\fR()
and the corresponding execution of
\fBglEnd\fR()\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with argument
\fBGL_MATRIX_MODE\fR
.PP
\fBglGet\fR()
with argument
\fBGL_COLOR_MATRIX\fR
.PP
\fBglGet\fR()
with argument
\fBGL_MODELVIEW_MATRIX\fR
.PP
\fBglGet\fR()
with argument
\fBGL_PROJECTION_MATRIX\fR
.PP
\fBglGet\fR()
with argument
\fBGL_TEXTURE_MATRIX\fR
.SH "SEE ALSO"
.PP
\fBglMatrixMode\fR(),
\fBglMultMatrix\fR(),
\fBglPushMatrix\fR(),
\fBglScale\fR(),
\fBglTranslate\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. This document is licensed under the SGI Free Software B License\&. For details, see
\m[blue]\fBhttps://khronos\&.org/registry/OpenGL\-Refpages/LICENSES/LicenseRef\-FreeB\&.txt\fR\m[]\&.
