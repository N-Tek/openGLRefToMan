'\" t
.\"     Title: glColorTable
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 12/21/2021
.\"    Manual: { OpenGL 2.1 }
.\"    Source: pkged by Necib CAPAR(PhD.)
.\"  Language: English
.\"
.TH "GLCOLORTABLE" "3GLearliest" "12/21/2021" "pkged by Necib CAPAR(PhD\&.)" "{ OpenGL 2\&.1 }"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glColorTable \- define a color lookup table
.SH "C SPECIFICATION"
.HP \w'void\ glColorTable('u
.BI "void glColorTable(GLenum\ " "target" ", GLenum\ " "internalformat" ", GLsizei\ " "width" ", GLenum\ " "format" ", GLenum\ " "type" ", const\ void\ *\ " "data" ");"
.SH "PARAMETERS"
.PP
\fItarget\fR
.RS 4
Must be one of
\fBGL_COLOR_TABLE\fR,
\fBGL_POST_CONVOLUTION_COLOR_TABLE\fR,
\fBGL_POST_COLOR_MATRIX_COLOR_TABLE\fR,
\fBGL_PROXY_COLOR_TABLE\fR,
\fBGL_PROXY_POST_CONVOLUTION_COLOR_TABLE\fR, or
\fBGL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE\fR\&.
.RE
.PP
\fIinternalformat\fR
.RS 4
The internal format of the color table\&. The allowable values are
\fBGL_ALPHA\fR,
\fBGL_ALPHA4\fR,
\fBGL_ALPHA8\fR,
\fBGL_ALPHA12\fR,
\fBGL_ALPHA16\fR,
\fBGL_LUMINANCE\fR,
\fBGL_LUMINANCE4\fR,
\fBGL_LUMINANCE8\fR,
\fBGL_LUMINANCE12\fR,
\fBGL_LUMINANCE16\fR,
\fBGL_LUMINANCE_ALPHA\fR,
\fBGL_LUMINANCE4_ALPHA4\fR,
\fBGL_LUMINANCE6_ALPHA2\fR,
\fBGL_LUMINANCE8_ALPHA8\fR,
\fBGL_LUMINANCE12_ALPHA4\fR,
\fBGL_LUMINANCE12_ALPHA12\fR,
\fBGL_LUMINANCE16_ALPHA16\fR,
\fBGL_INTENSITY\fR,
\fBGL_INTENSITY4\fR,
\fBGL_INTENSITY8\fR,
\fBGL_INTENSITY12\fR,
\fBGL_INTENSITY16\fR,
\fBGL_R3_G3_B2\fR,
\fBGL_RGB\fR,
\fBGL_RGB4\fR,
\fBGL_RGB5\fR,
\fBGL_RGB8\fR,
\fBGL_RGB10\fR,
\fBGL_RGB12\fR,
\fBGL_RGB16\fR,
\fBGL_RGBA\fR,
\fBGL_RGBA2\fR,
\fBGL_RGBA4\fR,
\fBGL_RGB5_A1\fR,
\fBGL_RGBA8\fR,
\fBGL_RGB10_A2\fR,
\fBGL_RGBA12\fR, and
\fBGL_RGBA16\fR\&.
.RE
.PP
\fIwidth\fR
.RS 4
The number of entries in the color lookup table specified by
\fIdata\fR\&.
.RE
.PP
\fIformat\fR
.RS 4
The format of the pixel data in
\fIdata\fR\&. The allowable values are
\fBGL_RED\fR,
\fBGL_GREEN\fR,
\fBGL_BLUE\fR,
\fBGL_ALPHA\fR,
\fBGL_LUMINANCE\fR,
\fBGL_LUMINANCE_ALPHA\fR,
\fBGL_RGB\fR,
\fBGL_BGR\fR,
\fBGL_RGBA\fR, and
\fBGL_BGRA\fR\&.
.RE
.PP
\fItype\fR
.RS 4
The type of the pixel data in
\fIdata\fR\&. The allowable values are
\fBGL_UNSIGNED_BYTE\fR,
\fBGL_BYTE\fR,
\fBGL_UNSIGNED_SHORT\fR,
\fBGL_SHORT\fR,
\fBGL_UNSIGNED_INT\fR,
\fBGL_INT\fR,
\fBGL_FLOAT\fR,
\fBGL_UNSIGNED_BYTE_3_3_2\fR,
\fBGL_UNSIGNED_BYTE_2_3_3_REV\fR,
\fBGL_UNSIGNED_SHORT_5_6_5\fR,
\fBGL_UNSIGNED_SHORT_5_6_5_REV\fR,
\fBGL_UNSIGNED_SHORT_4_4_4_4\fR,
\fBGL_UNSIGNED_SHORT_4_4_4_4_REV\fR,
\fBGL_UNSIGNED_SHORT_5_5_5_1\fR,
\fBGL_UNSIGNED_SHORT_1_5_5_5_REV\fR,
\fBGL_UNSIGNED_INT_8_8_8_8\fR,
\fBGL_UNSIGNED_INT_8_8_8_8_REV\fR,
\fBGL_UNSIGNED_INT_10_10_10_2\fR, and
\fBGL_UNSIGNED_INT_2_10_10_10_REV\fR\&.
.RE
.PP
\fIdata\fR
.RS 4
Pointer to a one\-dimensional array of pixel data that is processed to build the color table\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglColorTable\fR
may be used in two ways: to test the actual size and color resolution of a lookup table given a particular set of parameters, or to load the contents of a color lookup table\&. Use the targets
\fBGL_PROXY_*\fR
for the first case and the other targets for the second case\&.
.PP
If a non\-zero named buffer object is bound to the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target (see
\fBglBindBuffer\fR()) while a color table is specified,
\fIdata\fR
is treated as a byte offset into the buffer object\*(Aqs data store\&.
.PP
If
\fItarget\fR
is
\fBGL_COLOR_TABLE\fR,
\fBGL_POST_CONVOLUTION_COLOR_TABLE\fR, or
\fBGL_POST_COLOR_MATRIX_COLOR_TABLE\fR,
\fBglColorTable\fR
builds a color lookup table from an array of pixels\&. The pixel array specified by
\fIwidth\fR,
\fIformat\fR,
\fItype\fR, and
\fIdata\fR
is extracted from memory and processed just as if
\fBglDrawPixels\fR()
were called, but processing stops after the final expansion to RGBA is completed\&.
.PP
The four scale parameters and the four bias parameters that are defined for the table are then used to scale and bias the R, G, B, and A components of each pixel\&. (Use
\fBglColorTableParameter\fR
to set these scale and bias parameters\&.)
.PP
Next, the R, G, B, and A values are clamped to the range
0 1\&. Each pixel is then converted to the internal format specified by
\fIinternalformat\fR\&. This conversion simply maps the component values of the pixel (R, G, B, and A) to the values included in the internal format (red, green, blue, alpha, luminance, and intensity)\&. The mapping is as follows:
.br 
.TS
allbox tab(:);
lB cB cB cB cB cB cB.
T{
\fB Internal Format \fR
T}:T{
\fB Red \fR
T}:T{
\fB Green \fR
T}:T{
\fB Blue \fR
T}:T{
\fB Alpha \fR
T}:T{
\fB Luminance \fR
T}:T{
\fB Intensity \fR
T}
.T&
l c c c c c c
l c c c c c c
l c c c c c c
l c c c c c c
l c c c c c c
l c c c c c c.
T{
\fBGL_ALPHA\fR
T}:T{

T}:T{

T}:T{

T}:T{
A
T}:T{

T}:T{

T}
T{
\fBGL_LUMINANCE\fR
T}:T{

T}:T{

T}:T{

T}:T{

T}:T{
R
T}:T{

T}
T{
\fBGL_LUMINANCE_ALPHA\fR
T}:T{

T}:T{

T}:T{

T}:T{
A
T}:T{
R
T}:T{

T}
T{
\fBGL_INTENSITY\fR
T}:T{

T}:T{

T}:T{

T}:T{

T}:T{

T}:T{
R
T}
T{
\fBGL_RGB\fR
T}:T{
R
T}:T{
G
T}:T{
B
T}:T{

T}:T{

T}:T{

T}
T{
\fBGL_RGBA\fR
T}:T{
R
T}:T{
G
T}:T{
B
T}:T{
A
T}:T{

T}:T{

T}
.TE
.sp 1
.PP
Finally, the red, green, blue, alpha, luminance, and/or intensity components of the resulting pixels are stored in the color table\&. They form a one\-dimensional table with indices in the range
0 width \- 1\&.
.PP
If
\fItarget\fR
is
\fBGL_PROXY_*\fR,
\fBglColorTable\fR
recomputes and stores the values of the proxy color table\*(Aqs state variables
\fBGL_COLOR_TABLE_FORMAT\fR,
\fBGL_COLOR_TABLE_WIDTH\fR,
\fBGL_COLOR_TABLE_RED_SIZE\fR,
\fBGL_COLOR_TABLE_GREEN_SIZE\fR,
\fBGL_COLOR_TABLE_BLUE_SIZE\fR,
\fBGL_COLOR_TABLE_ALPHA_SIZE\fR,
\fBGL_COLOR_TABLE_LUMINANCE_SIZE\fR, and
\fBGL_COLOR_TABLE_INTENSITY_SIZE\fR\&. There is no effect on the image or state of any actual color table\&. If the specified color table is too large to be supported, then all the proxy state variables listed above are set to zero\&. Otherwise, the color table could be supported by
\fBglColorTable\fR
using the corresponding non\-proxy target, and the proxy state variables are set as if that target were being defined\&.
.PP
The proxy state variables can be retrieved by calling
\fBglGetColorTableParameter\fR()
with a target of
\fBGL_PROXY_*\fR\&. This allows the application to decide if a particular
\fBglColorTable\fR
command would succeed, and to determine what the resulting color table attributes would be\&.
.PP
If a color table is enabled, and its width is non\-zero, then its contents are used to replace a subset of the components of each RGBA pixel group, based on the internal format of the table\&.
.PP
Each pixel group has color components (R, G, B, A) that are in the range
0\&.0 1\&.0\&. The color components are rescaled to the size of the color lookup table to form an index\&. Then a subset of the components based on the internal format of the table are replaced by the table entry selected by that index\&. If the color components and contents of the table are represented as follows:
.PP
.TS
allbox tab(:);
cB cB.
T{
\fB Representation \fR
T}:T{
\fB Meaning \fR
T}
.T&
c l
c l
c l
c l
c l
c l
c l
c l
c l
c l.
T{
r
T}:T{
Table index computed from R
T}
T{
g
T}:T{
Table index computed from G
T}
T{
b
T}:T{
Table index computed from B
T}
T{
a
T}:T{
Table index computed from A
T}
T{
L[i]
T}:T{
Luminance value at table index i
T}
T{
I[i]
T}:T{
Intensity value at table index i
T}
T{
R[i]
T}:T{
Red value at table index i
T}
T{
G[i]
T}:T{
Green value at table index i
T}
T{
B[i]
T}:T{
Blue value at table index i
T}
T{
A[i]
T}:T{
Alpha value at table index i
T}
.TE
.sp 1
.PP
then the result of color table lookup is as follows:
.PP
.TS
allbox tab(:);
lB cB s s s
lB cB cB cB cB.
T{
\fB \fR
T}:T{
\fB Resulting Texture Components \fR
T}
T{
\fB Table Internal Format \fR
T}:T{
\fB R \fR
T}:T{
\fB G \fR
T}:T{
\fB B \fR
T}:T{
\fB A \fR
T}
.T&
l c c c c
l c c c c
l c c c c
l c c c c
l c c c c
l c c c c.
T{
\fBGL_ALPHA\fR
T}:T{
R
T}:T{
G
T}:T{
B
T}:T{
A[a]
T}
T{
\fBGL_LUMINANCE\fR
T}:T{
L[r]
T}:T{
L[g]
T}:T{
L[b]
T}:T{
At
T}
T{
\fBGL_LUMINANCE_ALPHA\fR
T}:T{
L[r]
T}:T{
L[g]
T}:T{
L[b]
T}:T{
A[a]
T}
T{
\fBGL_INTENSITY\fR
T}:T{
I[r]
T}:T{
I[g]
T}:T{
I[b]
T}:T{
I[a]
T}
T{
\fBGL_RGB\fR
T}:T{
R[r]
T}:T{
G[g]
T}:T{
B[b]
T}:T{
A
T}
T{
\fBGL_RGBA\fR
T}:T{
R[r]
T}:T{
G[g]
T}:T{
B[b]
T}:T{
A[a]
T}
.TE
.sp 1
.PP
When
\fBGL_COLOR_TABLE\fR
is enabled, the colors resulting from the pixel map operation (if it is enabled) are mapped by the color lookup table before being passed to the convolution operation\&. The colors resulting from the convolution operation are modified by the post convolution color lookup table when
\fBGL_POST_CONVOLUTION_COLOR_TABLE\fR
is enabled\&. These modified colors are then sent to the color matrix operation\&. Finally, if
\fBGL_POST_COLOR_MATRIX_COLOR_TABLE\fR
is enabled, the colors resulting from the color matrix operation are mapped by the post color matrix color lookup table before being used by the histogram operation\&.
.PP
.SH "NOTES"
.PP
\fBglColorTable\fR
is present only if
ARB_imaging
is returned when
\fBglGetString\fR()
is called with an argument of
\fBGL_EXTENSIONS\fR\&.
.PP
If
\fItarget\fR
is set to
\fBGL_COLOR_TABLE\fR,
\fBGL_POST_CONVOLUTION_COLOR_TABLE\fR, or
\fBGL_POST_COLOR_MATRIX_COLOR_TABLE\fR, then
\fIwidth\fR
must be a power of two or a
\fBGL_INVALID_VALUE\fR
error is generated\&.
.PP
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fItarget\fR
is not one of the allowable values\&.
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fIinternalformat\fR
is not one of the allowable values\&.
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fIformat\fR
is not one of the allowable values\&.
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fItype\fR
is not one of the allowable values\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIwidth\fR
is less than zero\&.
.PP
\fBGL_TABLE_TOO_LARGE\fR
is generated if the requested color table is too large to be supported by the implementation, and
\fItarget\fR
is not a
\fBGL_PROXY_*\fR
target\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if a non\-zero buffer object name is bound to the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target and the buffer object\*(Aqs data store is currently mapped\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if a non\-zero buffer object name is bound to the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target and the data would be unpacked from the buffer object such that the memory reads required would exceed the data store size\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if a non\-zero buffer object name is bound to the
\fBGL_PIXEL_UNPACK_BUFFER\fR
target and
\fIdata\fR
is not evenly divisible into the number of bytes needed to store in memory a datum indicated by
\fItype\fR\&.
.PP
\fBGL_INVALID_OPERATION\fR
is generated if
\fBglColorTable\fR
is executed between the execution of
\fBglBegin\fR()
and the corresponding execution of
\fBglEnd\fR()\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGetColorTableParameter\fR()
.PP
\fBglGet\fR()
with argument
\fBGL_PIXEL_UNPACK_BUFFER_BINDING\fR
.SH "SEE ALSO"
.PP
\fBglColorSubTable\fR(),
\fBglColorTableParameter\fR,
\fBglCopyColorTable\fR(),
\fBglCopyColorSubTable\fR(),
\fBglGetColorTable\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
1991\-2006 Silicon Graphics, Inc\&. This document is licensed under the SGI Free Software B License\&. For details, see
\m[blue]\fBhttps://khronos\&.org/registry/OpenGL\-Refpages/LICENSES/LicenseRef\-FreeB\&.txt\fR\m[]\&.
