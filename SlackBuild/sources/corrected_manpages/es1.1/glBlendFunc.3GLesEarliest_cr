'\" t
.\"     Title: glBlendFunc
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 12/21/2021
.\"    Manual: { OpenGL ES 1.1 }
.\"    Source: pkged by Necib CAPAR(PhD.)
.\"  Language: English
.\"
.TH "GLBLENDFUNC" "3GLesEarliest" "12/21/2021" "pkged by Necib CAPAR(PhD\&.)" "{ OpenGL ES 1\&.1 }"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glBlendFunc \- specify pixel arithmetic
.SH "C SPECIFICATION"
.HP \w'void\ glBlendFunc('u
.BI "void glBlendFunc(GLenum\ " "sfactor" ", GLenum\ " "dfactor" ");"
.SH "PARAMETERS"
.PP
\fIsfactor\fR
.RS 4
Specifies how the red, green, blue, and alpha source blending factors are computed\&. The following symbolic constants are accepted:
\fBGL_ZERO\fR,
\fBGL_ONE\fR,
\fBGL_DST_COLOR\fR,
\fBGL_ONE_MINUS_DST_COLOR\fR,
\fBGL_SRC_ALPHA\fR,
\fBGL_ONE_MINUS_SRC_ALPHA\fR,
\fBGL_DST_ALPHA\fR,
\fBGL_ONE_MINUS_DST_ALPHA\fR, and
\fBGL_SRC_ALPHA_SATURATE\fR\&. The initial value is
\fBGL_ONE\fR\&.
.RE
.PP
\fIdfactor\fR
.RS 4
Specifies how the red, green, blue, and alpha destination blending factors are computed\&. Eight symbolic constants are accepted:
\fBGL_ZERO\fR,
\fBGL_ONE\fR,
\fBGL_SRC_COLOR\fR,
\fBGL_ONE_MINUS_SRC_COLOR\fR,
\fBGL_SRC_ALPHA\fR,
\fBGL_ONE_MINUS_SRC_ALPHA\fR,
\fBGL_DST_ALPHA\fR, and
\fBGL_ONE_MINUS_DST_ALPHA\fR\&. The initial value is
\fBGL_ZERO\fR\&.
.RE
.SH "DESCRIPTION"
.PP
Pixels can be drawn using a function that blends the incoming (source) values with the values that are already in the color buffer (the destination values)\&. Use
\fBglEnable\fR()
and
\fBglDisable\fR()
with argument
\fBGL_BLEND\fR
to enable and disable blending\&. Blending is initially disabled\&.
.PP
\fBglBlendFunc\fR
defines the operation of blending when it is enabled\&.
\fIsfactor\fR
specifies which of eleven methods is used to scale the source color components\&.
\fIdfactor\fR
specifies which of ten methods is used to scale the destination color components\&. The eleven possible methods are described in the following table\&. Each method defines four scale factors, one each for red, green, blue, and alpha\&.
.PP
In the table and in subsequent equations, source and destination color components are referred to as
( Rs, Gs, Bs, As )
and
( Rd, Gd, Bd, Ad )\&. They are understood to have integer values between 0 and
( kR, kG, kB, kA ), where

kc = 2^(mc) \- 1

.PP
and ( mR, mG, mB, mA ) is the number of red, green, blue, and alpha bitplanes\&.
.PP
Source and destination scale factors are referred to as
( sR, sG, sB, sA )
and
( dR, dG, dB, dA )\&. The scale factors described in the table, denoted

( fR, fG, fB, fA ), represent either source or destination factors\&. All scale factors have range [0, 1]\&.
.TS
center tab(:);
lB cB.
T{
Parameter
T}:T{
(fR, fG, fB, fA)
T}
.T&
l c
l c
l c
l c
l c
l c
l c
l c
l c
l c
l c.
T{
\fBGL_ZERO\fR
T}:T{
(0, 0, 0, 0)
T}
T{
\fBGL_ONE\fR
T}:T{
(1, 1, 1, 1)
T}
T{
\fBGL_SRC_COLOR\fR
T}:T{
(Rs/kR, Gs/kG, Bs/kB, As/kA)
T}
T{
\fBGL_ONE_MINUS_SRC_COLOR\fR
T}:T{
(1, 1, 1, 1) \- (Rs/kR, Gs/kG, Bs/kB, As/kA)
T}
T{
\fBGL_DST_COLOR\fR
T}:T{
(Rd/kR, Gd/kG, Bd/kB, Ad/kA)
T}
T{
\fBGL_ONE_MINUS_DST_COLOR\fR
T}:T{
(1, 1, 1, 1) \- (Rd/kR, Gd/kG, Bd/kB, Ad/kA)
T}
T{
\fBGL_SRC_ALPHA\fR
T}:T{
(As/kA, As/kA, As/kA, As/kA)
T}
T{
\fBGL_ONE_MINUS_SRC_ALPHA\fR
T}:T{
(1, 1, 1, 1) \- (As/kA, As/kA, As/kA, As/kA)
T}
T{
\fBGL_DST_ALPHA\fR
T}:T{
(Ad/kA, Ad/kA, Ad/kA, Ad/kA)
T}
T{
\fBGL_ONE_MINUS_DST_ALPHA\fR
T}:T{
(1, 1, 1, 1) \- (Ad/kA, Ad/kA, Ad/kA, Ad/kA)
T}
T{
\fBGL_SRC_ALPHA_SATURATE\fR
T}:T{
(i, i, i, 1) 
T}
.TE
.sp 1
.PP
In the table,

		    i=min(As, kA\-Ad) / kA
.PP
To determine the blended values of a pixel, the system uses the following equations:

		    Rd = min(kR, Rs sR + Rd dR)


		    Gd = min(kG, Gs sG + Gd dG)


		    Bd = min(kB, Bs sB + Bd dB)


		    Ad = min(kA, As sA + Ad dA)
.PP
Despite the apparent precision of the above equations, blending arithmetic is not exactly specified, because blending operates with imprecise integer color values\&. However, a blend factor that should be equal to 1 is guaranteed not to modify its multiplicand, and a blend factor equal to 0 reduces its multiplicand to 0\&. For example, when
\fIsfactor\fR
is
\fBGL_SRC_ALPHA\fR,
\fIdfactor\fR
is
\fBGL_ONE_MINUS_SRC_ALPHA\fR, and
As
is equal to
kA, the equations reduce to simple replacement:

		    Rd = Rs


		    Gd = Gs


		    Bd = Bs


		    Ad = As
.PP
\fBglBlendFunc\fR
operates on all pixel write operations, including the scan conversion of points, lines, and polygons\&.
\fBglBlendFunc\fR
does not affect
\fBglClear\fR()\&.
.SH "EXAMPLES"
.PP
Transparency is best implemented using
\fBglBlendFunc\fR(\fBGL_SRC_ALPHA\fR,
\fBGL_ONE_MINUS_SRC_ALPHA\fR) with primitives sorted from farthest to nearest\&. Note that this transparency calculation does not require the presence of alpha bitplanes in the color buffer\&.
.PP
\fBglBlendFunc\fR(\fBGL_SRC_ALPHA\fR,
\fBGL_ONE_MINUS_SRC_ALPHA\fR) is also useful for rendering antialiased points and lines\&.
.SH "NOTES"
.PP
Incoming (source) alpha is correctly thought of as a material opacity, ranging from 1\&.0 (kA), representing complete opacity, to 0\&.0 (0), representing complete transparency\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_ENUM\fR
is generated if either
\fIsfactor\fR
or
\fIdfactor\fR
is not an accepted value\&.
.SH "SEE ALSO"
.PP
\fBglAlphaFunc\fR(),
\fBglClear\fR(),
\fBglDepthFunc\fR(),
\fBglEnable\fR(),
\fBglLogicOp\fR(),
\fBglStencilFunc\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
2003\-2004 Silicon Graphics, Inc\&. This document is licensed under the SGI Free Software B License\&. For details, see
\m[blue]\fBhttps://khronos\&.org/registry/OpenGL\-Refpages/LICENSES/LicenseRef\-FreeB\&.txt\fR\m[]\&.
